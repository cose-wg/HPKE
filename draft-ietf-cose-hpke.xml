<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-13" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization abbrev="H-BRS">University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2025" month="June" day="01"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 69?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by the pre-shared key authenticated
variant of HPKE.</t>

<t>This document defines the use of the HPKE with COSE.</t>



    </abstract>



  </front>

  <middle>


<?line 83?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Direct Encryption mode, where HPKE is used to encrypt the plaintext. This mode can only be used with a single recipient. <xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a content encryption key (CEK) and the CEK is subsequently used to encrypt the plaintext. This mode supports multiple recipients. <xref target="two-layer"/> provides the details.</t>
</list></t>

<t>In both cases, a new COSE header parameter called 'ek' is used
to convey the content of the enc structure defined in the HPKE
specification. The enc value represents the serialized encapsulated
public key.</t>

<t>When used with HPKE, the 'ek' header parameter MUST be present in
the unprotected header and MUST contain the encapsulated key,
which is the output of the HPKE KEM. The value of 'ek' MUST be a
bstr.</t>

<t>For all modes, the HPKE info parameter defaults to the empty string; mutually known private information MAY be used instead. The concept of mutually known private information is defined in <xref target="NIST.SP.800-56Ar3"/> as an input to the key derivation function.</t>

<section anchor="one-layer"><name>HPKE Direct Encryption Mode</name>

<t>This mode applies if the COSE_Encrypt0 structure uses a COSE-HPKE algorithm
and has no recipient structure(s).</t>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it MUST be included
in the protected header and MUST be a COSE-HPKE algorithm.</t>

<t>Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this documents RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 structure includes a 'kid' parameter, the
recipient MAY use it to select the corresponding private key.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into an HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; mutually known private information MAY be used instead.</t>
  <t>aad: Canonical encoding of the Enc_structure from <xref target="RFC9052"/>).</t>
  <t>pt: The raw message plaintext.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be used as layer ciphertext. If not using detached content, this is directly placed as
ciphertext in COSE_Encrypt0 structure. Otherwise, it is transported separately and the ciphertext field is nil.
See Section 5 of <xref target="RFC9052"/> for a description of detached payloads.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into an HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; mutually known private information MAY be used instead.</t>
  <t>aad: Canonical encoding of the Enc_structure from <xref target="RFC9052"/>).</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext.</t>
</list></t>

<t>The plaintext output is the raw message plaintext.</t>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>This mode is selected if the COSE_recipient structure uses a COSE-HPKE algorithm.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the COSE_recipient structure using a COSE-HPKE algorithm.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This section describes the Recipient_structure.
It serves instead of COSE_KDF_Context for COSE-HPKE recipients (and possibly other COSE algorithms defined outside this document).
It MUST be used for COSE-HPKE recipients as it provides the protection for recipient protected headers.
It is patterned after the Enc_structure in <xref target="RFC9052"/>, but is specifically for a COSE_recipient, never a COSE_Encrypt.
The COSE_KDF_Context MUST NOT be used in COSE-HPKE.</t>

<figure><artwork><![CDATA[
Recipient_structure = [ 
    context: "Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_aad: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a person-in-the-middle changes the following layer algorithm from an AEAD algorithm to one that is not foiling the protection of the following layer headers).</t>
  <t>"recipient_protected_header" contains the protected headers from the COSE_recipient CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements", specified in Section 4.2.1 of RFC 8949 <xref target="STD94"/>.</t>
  <t>"recipient_aad" contains any additional context the application wishes to protect.
If none, it is a zero-length string.
This is distinct from the external_aad for the whole COSE encrypt.
It is per-recipient.
Since it is not a header, it may be secret data that is not transmitted.
It provides a means to convey many of the fields in COSE_KDF_Context.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it MUST be in the protected header and MUST be a COSE-HPKE algorithm.</t>

<t>The unprotected header MAY contain the kid parameter to identify the static recipient public key the sender used.
Use of the 'kid' parameter is RECOMMENDED
to explicitly identify the static recipient public key
used by the sender.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; mutually known private information MAY be used instead.</t>
  <t>aad: Canonical encoding of the Recipient_structure.</t>
  <t>pt: The raw key for the next layer down.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be placed raw in the ciphertext field in the COSE_recipient.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; mutually known private information MAY be used instead.</t>
  <t>aad: Canonical encoding of the Recipient_structure.</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext field.</t>
</list></t>

<t>The plaintext output is the raw key for the next layer down.</t>

<t>It is not necessary to fill in recipient_aad as HPKE itself covers the attacks that recipient_aad (and COSE_KDF_Context (and SP800-56A)) are used to mitigate.
COSE-HPKE use cases may use it for any purpose they wish, but it should generally be for small identifiers, context or secrets, not to protect bulk external data.
Bulk external data should be protected at layer 0 with external_aad.</t>

<t>The COSE_recipient structure is repeated for each recipient.</t>

<t>When encrypting the content at layer 0 then the instructions in
Section 5.3 of <xref target="RFC9052"/> MUST to be followed, which includes the
calculation of the authenticated data strcture.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>If the "kty" field is "AKP", then the public and private keys SHALL be the raw HPKE public and private
keys (respectively) for the KEM used by the algorithm.</t>
  <t>Otherwise, the key MUST be suitable for the KEM used by the algorithm. In case the "kty" parameter
is "EC2" or "OKP", this means the value of "crv" parameter is suitable. For the algorithms defined in
this document, the valid combinations of the KEM, "kty" and "crv" are shown in  <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
A COSE-HPKE algorithm is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>For readability the algorithm ciphersuites labels are built according
to the following scheme:</t>

<figure><artwork><![CDATA[
HPKE-<Version>-<Mode>-<KEM>-<KDF>-<AEAD>
]]></artwork></figure>

<t>The "Mode" indicator may be populated with the following values from
Table 1 of <xref target="RFC9180"/>:</t>

<t><list style="symbols">
  <t>"Base" refers to "mode_base" described in Section 5.1.1 of <xref target="RFC9180"/>,
which only enables encryption to the holder of a given KEM private key.</t>
  <t>"PSK" refers to "mode_psk", described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>
  <t>"Auth" refers to "mode_auth", described in Section 5.1.3 of <xref target="RFC9180"/>,
which authenticates using an asymmetric key.</t>
  <t>"Auth_Psk" refers to "mode_auth_psk", described in Section 5.1.4 of <xref target="RFC9180"/>,
which authenticates using both a PSK and an asymmetric key.</t>
</list></t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document, which all use the "Base" mode and the values registered in the
HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Cipher Suite Label                               | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-0                                           |0x10 | 0x1 | 0x1  |
| HPKE-1                                           |0x11 | 0x2 | 0x2  |
| HPKE-2                                           |0x12 | 0x3 | 0x2  |
| HPKE-3                                           |0x20 | 0x1 | 0x1  |
| HPKE-4                                           |0x20 | 0x1 | 0x3  |
| HPKE-5                                           |0x21 | 0x3 | 0x2  |
| HPKE-6                                           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extend to maintain the tradeoff between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA CoSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that consitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE algorithm uniquely determines the KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the KEM used, COSE_Key type and its curve/key subtype.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| HPKE KEM id         | COSE_Key     |
|                     | kty | crv    |
+---------------------+-----+--------+
| 0x0010, 0x0013      | EC2 | P-256  |
| 0x0011, 0x0014      | EC2 | P-384  |
| 0x0012, 0x0015      | EC2 | P-521  |
| 0x0020              | OKP | X25519 |
| 0x0021              | OKP | X448   |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that shows all COSE message types
(COSE_Encrypt0, COSE_Encrypt and COSE_MAC) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Direct Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Direct Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-0</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-0 (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following:</t>

<t>TODO: recompute this for Recipient_structure</t>

<t><list style="symbols">
  <t>Encryption alg: AES-128-GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>detatched ciphertext: h'cc168c4e148c52a83010a75250935a47ccb8682deebcef8fce5d60c161e849f53a2dc664'</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-0</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'97ad883f949f4cdcb1301b9446950efd4eb519e16c4a3d78304eec832692f9f6'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-4</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'b8ed3f4df56c230e36fa6620a47f24d08856d242ea547c5521ff7bd69af8fd6f'</t>
    </list></t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
96_0([
    / alg = AES-128-GCM (1) /
    h'a10101',
    {
        / iv /
        5: h'b3fb95dde18c6f90a9f0ae55',
    },
    / detached ciphertext /
    null,
    [
        [
            / alg = HPKE-0 (Assumed: 35) /
            h'a1011823',
            {
                / kid /
                4: h'3031',
                / ek /
                -4: h'04d97b79486fe2e7b98fb1bd43
                      c4faee316ff38d28609a1cf568
                      40a809298a91e601f1cc0c2ba4
                      6cb67b41f4651b769cafd9df78
                      e58aa7f5771291bd4f0f420ba6',
            },
            / ciphertext containing encrypted CEK /
            h'24450f54ae93375351467d17aa7a795cfede2
              c03eced1ad21fcb7e7c2fe64397',
        ],
        [
            / alg = HPKE-4 (Assumed: 42) /
            h'a101182a',
            {
                / kid /
                4: h'3032',
                / ek /
                -4: h'd1afbdc95b0e735676f6bca34f
                      be50f2822259ac09bfc3c500f1
                      4a05de9b2833',
            },
            / ciphertext containing encrypted CEK /
            h'079b443ec6dfcda6a5f8748aff3875146a8ed
              40359e1279b545166385d8d9b59',
        ],
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
<section anchor="cosemac"><name>COSE_MAC</name>

<t>An example of the COSE_MAC structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-mac"/>.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>MAC alg: HMAC 256/256</t>
  <t>payload: "This is the content."</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-0</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'e5dd9472b5807636c95be0ba2575020ba91cbb3561b52be141da89678c664307'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-4</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'78a49d7af71b5244498e943f361aa0250184afc48b8098a68ae97ccd2cd7e56f'</t>
    </list></t>
</list></t>

<figure title="COSE_MAC Example for HPKE" anchor="hpke-example-cose-mac"><artwork><![CDATA[
97_0([
    / alg = HMAC 256/256 (5) /
    h'a10105',
    {},
    / payload = 'This is the content.' /
    h'546869732069732074686520636f6e74656e742e',
    / tag /
    h'5cdcf6055fcbdb53b4001d8fb88b2a46b200ed28e1e
          d77e16ddf43fb3cac3a98',
    [
        [
            / alg = HPKE-0 (Assumed: 35) /
            h'a1011823',
            {
                / kid = '01' /
                4: h'3031',
                / ek /
                -4: h'043ac21632e45e1fbd733f002a
                      621aa4f3d94737adc395d5a7cb
                      6e9554bd1ad273aec991493786
                      d72616d9759bf8526e6e20c1ed
                      c41ba5739f2b2e441781aa0eb4',
            },
            / ciphertext containing encrypted MAC key /
            h'5cee2b4235a7ff695164f7a8d1e79ccf3ca3d
              e8b22f3592626020a95b2a8d3fb4d7aa7fe37
              432426ee70073a368f29d1',
        ],
        [
            / alg = HPKE-4 (Assumed: 42) /
            h'a101182a',
            {
                / kid = '02' /
                4: h'3032',
                / ek /
                -4: h'02cffacc60def3bb3d0a1c3661
                      227c9de8dc2b1d3939dd2c07d4
                      49ebb0bba324',
            },
            / ciphertext containing encrypted MAC key /
            h'3f5b8b60271d5234dbea554dc1461d0239e9f
              4589f6415e8563b061dbcb37795a616111b78
              2b4c589b534309327ffadc',
        ],
    ],
])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-0"><name>KEM Public Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375
              e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af
              7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-0"><name>KEM Private Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f7
              45228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72
              ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04
              e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-4"><name>KEM Public Key for HPKE-4</name>

<figure title="Key Representation Example for HPKE-4" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-4 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa
              9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist but outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generations are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0 can be
used to add authentication. HPKE also offers modes that offer authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-0</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-1</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-2</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-3</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-4</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-5</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-6</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[This specification]]</t>
</list></t>

</section>
</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<referencegroup anchor="STD94" target="https://www.rfc-editor.org/info/std94">
  <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
    <front>
      <title>Concise Binary Object Representation (CBOR)</title>
      <author fullname="C. Bormann" initials="C." surname="Bormann"/>
      <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
      <date month="December" year="2020"/>
      <abstract>
        <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
        <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
      </abstract>
    </front>
    <seriesInfo name="STD" value="94"/>
    <seriesInfo name="RFC" value="8949"/>
    <seriesInfo name="DOI" value="10.17487/RFC8949"/>
  </reference>
</referencegroup>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="3" month="March" year="2025"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-06"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>
<reference anchor="NIST.SP.800-56Ar3" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>National Institute of Standards and Technology</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>

</references>


<?line 783?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank
Michael B. Jones,
John Mattsson,
Mike Prorock,
Michael Richardson,
and
Goeran Selander
for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
jGbv7S6DQJdVhKUs4WLDTC88mKK1fQI4kn7puQbjPvgwGCOMHHmxX7ZO9uPL
Y79IvGPujndExvXNZ2pwrb7VaPx8ZbF/ucrU/9Cy1M6AblyKQplSVkP4NbLo
GQDyGyxKjabfU/vZla78C1Zx/qeWcPbI7C9WthFi84jizec15XnvFiueYpmn
eUDC5UVZokiOwgYUJrHn1rW8zAFEbEUVsYIM9sjPjh+iTGorTaBPr97I7bDj
40FNuyGIXBgDu9Fr0pYsuXe5JaH6slSw2mE3CMYqMrnpsNK0Ae0SRYZSbIXj
U+0KNxOlMykAjVkf++C3FDrAZxQv9EEPTFre9pELRRYL48nWZ2rRRHfGQ54r
wj49/sEA4npL+cfpfgN6QDYIoedYk9qyElpSsTvDptKPNCB9UIIhjdFXmxfu
tN5MNkx08AhLgjUkuaurtpFwzwiUIlVdIFJmx71sgjRdo2pKe0uCfcFjUhKk
YuBbtQcuVvr4Fcj3vBl9+Emj5guuhdn8A4WhNyIieVgD5FgoSQbJ6yfCfWll
HQyg+OCE24Up99SH+hEtM0rvZ5OEI11y1A+U8hWEVmCMf6c26Q5uu4eDYQfg
4OzFm4PZwCq5MtUjBrPamqKLK+G9ouvBgjbaoNFHWLNDJt/x8uG4NwiIpR4o
aTHh7/T9jGkS2m4K7HLlj5jIfF6R4mq4DhuhiO/luXOASnfwWiKO9VwRiC+1
toCDtLk7GEeJCoqF+VSCsaM6Qx0MWmFmpqYtMr2fsze0gMlMwkm9bbQsuVMl
oSCiwg7j+nwOQ+cwCIVU4yl/eF+vW42vWyG71B7RoXNAu/7cTMC2HvRU1RiO
JwO0QF54tX6c3vFxKZSm1csS2wI6Runjx201Gmkf9iIOOKt+biaymjNTo4dI
BuncBZUTe47M4C0YJKpHkkrUqzUkkGih+jFGuwG7An5mydpl3/6A/R7U5yw0
rm9ULTlI8wKW3xUVYGkcV0Ch3Mr/02VdgLujmIiew40FbE0DMT7rOx/g/cXT
0XuqQAwfkJ05gIewHxLGqn5IHHYgRFfoPKwHdB2yX1qT2ukb2RkPLOh78IHi
puh4aSD4YElRIrbj2pBGcSyGJ7wUKyWbogSKpmndYHhiyChoQF10xOJ+BZa4
aM3/+C88UlJX/zn/D6QD/AMo4e+Lp/AbkflPUQ8jdHEINnpmaNcBRplur+u1
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
/w8Y97FWqHMAAA==

-->

</rfc>

