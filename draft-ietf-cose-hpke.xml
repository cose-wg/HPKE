<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-16" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization abbrev="H-BRS">University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2025" month="August" day="23"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 69?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE is a general encryption framework utilizing an asymmetric key encapsulation
mechanism (KEM), a key derivation function (KDF), and an Authenticated Encryption
with Associated Data (AEAD) algorithm.</t>

<t>This document defines the use of HPKE with COSE. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by the pre-shared key authenticated
variant of HPKE.</t>



    </abstract>



  </front>

  <middle>


<?line 83?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>)
with the single-shot APIs defined in Section 6 of <xref target="RFC9180"/>. Multiple
invocations of Open() / Seal() on the same context, as discussed in
Section 9.7.1 of <xref target="RFC9180"/> are not supported.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Integrated Encryption mode, where HPKE is used to encrypt
the plaintext. This mode can only be used with a single recipient.
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a
content encryption key (CEK) and the CEK is subsequently used to
encrypt the plaintext. This mode supports multiple recipients.
<xref target="two-layer"/> provides the details.</t>
</list></t>

<t>In both cases, a new COSE header parameter called 'ek' is used
to convey the content of the enc structure defined in the HPKE
specification. The enc value represents the serialized encapsulated
public key.</t>

<t>When used with HPKE, the 'ek' header parameter MUST be present in
the unprotected header and MUST contain the encapsulated key,
which is the output of the HPKE KEM. The value of 'ek' MUST be a
bstr.</t>

<t>HPKE defines several authentication modes, as described in Table 1 of <xref target="RFC9180"/>.
In COSE HPKE, only 'mode_base' and 'mode_psk' are supported. The mode is 'mode_psk' if
the 'psk_id' header parameter is present; otherwise, the mode defaults to 'mode_base'.
'mode_base' is described in Section 5.1.1 of <xref target="RFC9180"/>, which only enables encryption
to the holder of a given KEM private key. 'mode_psk' is described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>

<section anchor="one-layer"><name>HPKE Integrated Encryption Mode</name>

<t>This mode applies if the COSE_Encrypt0 structure uses a COSE-HPKE algorithm
and has no recipient structure(s).</t>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it MUST be included
in the protected header and MUST be a COSE-HPKE algorithm.</t>

<t>Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this document RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 structure includes a 'kid' parameter, the
recipient MAY use it to select the corresponding private key.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into an HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw message plaintext.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be used as layer ciphertext. If not using detached content, this is directly placed as
ciphertext in COSE_Encrypt0 structure. Otherwise, it is transported separately and the ciphertext field is nil.
See Section 5 of <xref target="RFC9052"/> for a description of detached payloads.</t>
</list></t>

<t>If 'mode_psk' has been selected, then the 'psk_id' parameter MUST be present.
If 'mode_base' has been chosen, then the 'psk_id' parameter MUST NOT be present.</t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into an HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext.</t>
</list></t>

<t>The plaintext output is the raw message plaintext.</t>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>This mode is selected if the COSE_recipient structure uses a COSE-HPKE algorithm.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the COSE_recipient structure using a COSE-HPKE algorithm.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key that the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This section defines the Recipient_structure, which is used in place of COSE_KDF_Context
for COSE-HPKE recipients. It MUST be used for COSE-HPKE recipients, as it provides
integrity protection for recipient-protected header parameters.</t>

<t>The Recipient_structure is modeled after the Enc_structure defined in <xref target="RFC9052"/>,
but is specific to COSE_recipient structures and MUST NOT be used with COSE_Encrypt.</t>

<t>Furthermore, the use of COSE_KDF_Context is prohibited in COSE-HPKE; it MUST NOT be
used.</t>

<figure><artwork><![CDATA[
Recipient_structure = [
    context: "HPKE Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_extra_info: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a where the attacker manipulates the content-encryption
algorithm identifier. This attack has been demonstrated against CMS and the mitigation
can be found in <xref target="I-D.ietf-lamps-cms-cek-hkdf-sha256"/>.</t>
  <t>"recipient_protected_header" contains the protected header parameters from the COSE_recipient
CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements",
specified in Section 4.2.1 of RFC 8949 <xref target="STD94"/>.</t>
  <t>"recipient_extra_info" contains any additional context the application wishes to include in
the key derivation via the HPKE info parameter. If none, it is a zero-length string.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it
MUST be in the protected header parameters and MUST be a COSE-HPKE algorithm.</t>

<t>The protected header MAY contain the kid parameter to identify the static recipient
public key that the sender used. Use of the 'kid' parameter is RECOMMENDED
to explicitly identify the static recipient public key used by the sender.
Including it in the protected header parameters ensures that it is input into the
key derivation function of HPKE.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw key for the next layer down.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be placed raw in the ciphertext field in the COSE_recipient.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>ct: The contents of the layer ciphertext field.</t>
</list></t>

<t>The plaintext output is the raw key for the next layer down.</t>

<t>It is not necessary to populate recipient_aad, as HPKE inherently mitigates the classes of
attacks that COSE_KDF_Context, and SP800-56A are designed to address. COSE-HPKE use cases
may still utilize recipient_aad for other purposes as needed; however, it is generally
intended for small values such as identifiers, contextual information, or secrets. It is
not designed for protecting large or bulk external data.</t>

<t>Any bulk external data that requires protection should be handled at layer 0 using external_aad.</t>

<t>The COSE_recipient structure is computed for each recipient.</t>

<t>When encrypting the content at layer 0, the instructions in <xref section="5.3" sectionFormat="of" target="RFC9052"/> MUST be followed, including the calculation of the
authenticated data structure.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>If the "kty" field is "AKP", then the public and private keys SHALL be the raw HPKE public and private
keys (respectively) for the KEM used by the algorithm.</t>
  <t>Otherwise, the key MUST be suitable for the KEM used by the algorithm. In case the "kty" parameter
is "EC2" or "OKP", this means the value of "crv" parameter is suitable. The valid combinations of
KEM, "kty" and "crv" for the algorithms defined in this document are shown in <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
A COSE-HPKE algorithm is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>The HPKE mode is determined by the presence or absence of the
'psk_id' parameter and is therefore not explicitly indicated in the
ciphersuite.</t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document and the values registered in the HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Ciphersuite Label                                | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-0                                           |0x10 | 0x1 | 0x1  |
| HPKE-1                                           |0x11 | 0x2 | 0x2  |
| HPKE-2                                           |0x12 | 0x3 | 0x2  |
| HPKE-3                                           |0x20 | 0x1 | 0x1  |
| HPKE-4                                           |0x20 | 0x1 | 0x3  |
| HPKE-5                                           |0x21 | 0x3 | 0x2  |
| HPKE-6                                           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>The following list maps the ciphersuite labels to their textual
description.</t>

<t><list style="symbols">
  <t>HPKE-0: DHKEM(P-256, HKDF-SHA256) KEM, HKDF-SHA256 KDF and AES-128-GCM AEAD.</t>
  <t>HPKE-1: DHKEM(P-384, HKDF-SHA384) KEM, HKDF-SHA384 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-2: DHKEM(P-521, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-3: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and AES-128-GCM AEAD.</t>
  <t>HPKE-4: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and ChaCha20Poly1305 AEAD.</t>
  <t>HPKE-5: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-6: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and ChaCha20Poly1305 AEAD.</t>
</list></t>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extent to strike a balance between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA COSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that constitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE algorithm uniquely determines the KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the KEM used, COSE_Key type, and its curve/key subtype.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| HPKE KEM id         | COSE_Key     |
|                     | kty | crv    |
+---------------------+-----+--------+
| 0x0010, 0x0013      | EC2 | P-256  |
| 0x0011, 0x0014      | EC2 | P-384  |
| 0x0012, 0x0015      | EC2 | P-521  |
| 0x0020              | OKP | X25519 |
| 0x0021              | OKP | X448   |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that show all COSE message types
(COSE_Encrypt0 and COSE_Encrypt) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Integrated Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Integrated Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-0</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-0 (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following:</t>

<t>TODO: recompute this for Recipient_structure</t>

<t><list style="symbols">
  <t>Encryption alg: AES-128-GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>detached ciphertext: h'cc168c4e148c52a83010a75250935a47ccb8682deebcef8fce5d60c161e849f53a2dc664'</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-0</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'97ad883f949f4cdcb1301b9446950efd4eb519e16c4a3d78304eec832692f9f6'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-4</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'b8ed3f4df56c230e36fa6620a47f24d08856d242ea547c5521ff7bd69af8fd6f'</t>
    </list></t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
96_0([
    / alg = AES-128-GCM (1) /
    h'a10101',
    {
        / iv /
        5: h'b3fb95dde18c6f90a9f0ae55',
    },
    / detached ciphertext /
    null,
    [
        [
            / alg = HPKE-0 (Assumed: 35) /
            h'a1011823',
            {
                / kid /
                4: h'3031',
                / ek /
                -4: h'04d97b79486fe2e7b98fb1bd43
                      c4faee316ff38d28609a1cf568
                      40a809298a91e601f1cc0c2ba4
                      6cb67b41f4651b769cafd9df78
                      e58aa7f5771291bd4f0f420ba6',
            },
            / ciphertext containing encrypted CEK /
            h'24450f54ae93375351467d17aa7a795cfede2
              c03eced1ad21fcb7e7c2fe64397',
        ],
        [
            / alg = HPKE-4 (Assumed: 42) /
            h'a101182a',
            {
                / kid /
                4: h'3032',
                / ek /
                -4: h'd1afbdc95b0e735676f6bca34f
                      be50f2822259ac09bfc3c500f1
                      4a05de9b2833',
            },
            / ciphertext containing encrypted CEK /
            h'079b443ec6dfcda6a5f8748aff3875146a8ed
              40359e1279b545166385d8d9b59',
        ],
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-0"><name>KEM Public Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375
              e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af
              7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-0"><name>KEM Private Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f7
              45228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72
              ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04
              e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-4"><name>KEM Public Key for HPKE-4</name>

<figure title="Key Representation Example for HPKE-4" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-4 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa
              9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>Both HPKE and HPKE COSE assume that the sender possesses the recipient's
public key. Therefore, some form of public key distribution mechanism is
assumed to exist, but this is outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generation are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_Mac, or COSE_Mac0 can be
used to add authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_Mac, 
or COSE_Mac0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<section anchor="hpke-0"><name>HPKE-0</name>

<t><list style="symbols">
  <t>Name: HPKE-0</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-1"><name>HPKE-1</name>

<t><list style="symbols">
  <t>Name: HPKE-1</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-2"><name>HPKE-2</name>

<t><list style="symbols">
  <t>Name: HPKE-2</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-3"><name>HPKE-3</name>

<t><list style="symbols">
  <t>Name: HPKE-3</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-4"><name>HPKE-4</name>

<t><list style="symbols">
  <t>Name: HPKE-4</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-5"><name>HPKE-5</name>

<t><list style="symbols">
  <t>Name: HPKE-5</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-6"><name>HPKE-6</name>

<t><list style="symbols">
  <t>Name: HPKE-6</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<section anchor="ek-header-parameter"><name>ek Header Parameter</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
<section anchor="pskid-header-parameter"><name>psk_id Header Parameter</name>

<t><list style="symbols">
  <t>Name: psk_id</t>
  <t>Label: TBDX (Assumed: -5)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: A key identifier (kid) for the pre-shared key
as defined in <xref section="5.1.2" sectionFormat="of" target="RFC9180"/></t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<referencegroup anchor="STD94" target="https://www.rfc-editor.org/info/std94">
  <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
    <front>
      <title>Concise Binary Object Representation (CBOR)</title>
      <author fullname="C. Bormann" initials="C." surname="Bormann"/>
      <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
      <date month="December" year="2020"/>
      <abstract>
        <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
        <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
      </abstract>
    </front>
    <seriesInfo name="STD" value="94"/>
    <seriesInfo name="RFC" value="8949"/>
    <seriesInfo name="DOI" value="10.17487/RFC8949"/>
  </reference>
</referencegroup>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="3" month="March" year="2025"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-06"/>
   
</reference>


<reference anchor="I-D.ietf-lamps-cms-cek-hkdf-sha256">
   <front>
      <title>Encryption Key Derivation in the Cryptographic Message Syntax (CMS) using HKDF with SHA-256</title>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <date day="19" month="September" year="2024"/>
      <abstract>
	 <t>   This document specifies the derivation of the content-encryption key
   or the content-authenticated-encryption key in the Cryptographic
   Message Syntax (CMS) using HMAC-based Extract-and-Expand Key
   Derivation Function (HKDF) with SHA-256.  The use of this mechanism
   provides protection against where the attacker manipulates the
   content-encryption algorithm identifier or the content-authenticated-
   encryption algorithm identifier.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-lamps-cms-cek-hkdf-sha256-05"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>
<reference anchor="NIST.SP.800-56Ar3" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>National Institute of Standards and Technology</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>

</references>


<?line 755?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like to thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank
Michael B. Jones,
John Mattsson,
Mike Prorock,
Michael Richardson,
Thomas Fossati,
and
GÃ¶ran Selander
for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

