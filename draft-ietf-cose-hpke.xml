<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-16" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization abbrev="H-BRS">University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2025" month="September" day="05"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 69?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE is a general encryption framework utilizing an asymmetric key encapsulation
mechanism (KEM), a key derivation function (KDF), and an Authenticated Encryption
with Associated Data (AEAD) algorithm.</t>

<t>This document defines the use of HPKE with COSE. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by the pre-shared key authenticated
variant of HPKE.</t>



    </abstract>



  </front>

  <middle>


<?line 83?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>)
with the single-shot APIs defined in <xref section="6" sectionFormat="of" target="RFC9180"/>. Multiple
invocations of Open() / Seal() on the same context, as discussed in
<xref section="9.7.1" sectionFormat="of" target="RFC9180"/> are not supported.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Integrated Encryption mode, where HPKE is used to encrypt
the plaintext. This mode can only be used with a single recipient.
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a
content encryption key (CEK) and the CEK is subsequently used to
encrypt the plaintext. This mode supports multiple recipients.
<xref target="two-layer"/> provides the details.</t>
</list></t>

<t>In both cases, a new COSE header parameter called 'ek' is used
to convey the content of the enc structure defined in the HPKE
specification. The enc value represents the serialized encapsulated
public key.</t>

<t>When used with HPKE, the 'ek' header parameter MUST be present in
the unprotected header and MUST contain the encapsulated key,
which is the output of the HPKE KEM. The value of 'ek' MUST be a
bstr.</t>

<t>HPKE defines several authentication modes, as described in Table 1 of <xref target="RFC9180"/>.
In COSE HPKE, only 'mode_base' and 'mode_psk' are supported. The mode is 'mode_psk' if
the 'psk_id' header parameter is present; otherwise, the mode defaults to 'mode_base'.
'mode_base' is described in <xref section="5.1.1" sectionFormat="of" target="RFC9180"/>, which only enables encryption
to the holder of a given KEM private key. 'mode_psk' is described in <xref section="5.1.2" sectionFormat="of" target="RFC9180"/>,
which authenticates using a pre-shared key.</t>

<section anchor="one-layer"><name>HPKE Integrated Encryption Mode</name>

<t>This mode applies if the COSE_Encrypt0 structure uses a COSE-HPKE algorithm
and has no recipient structure(s).</t>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it MUST be included
in the protected header and MUST be a COSE-HPKE algorithm.</t>

<t>Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this document RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 structure includes a 'kid' parameter, the
recipient MAY use it to select the corresponding private key.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into an HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw message plaintext.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be used as layer ciphertext. If not using detached content, this is directly placed as
ciphertext in COSE_Encrypt0 structure. Otherwise, it is transported separately and the ciphertext field is nil.
See <xref section="5" sectionFormat="of" target="RFC9052"/> for a description of detached payloads.</t>
</list></t>

<t>If 'mode_psk' has been selected, then the 'psk_id' parameter MUST be present.
If 'mode_base' has been chosen, then the 'psk_id' parameter MUST NOT be present.</t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into an HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext.</t>
</list></t>

<t>The plaintext output is the raw message plaintext.</t>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>This mode is selected if the COSE_recipient structure uses a COSE-HPKE algorithm.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the COSE_recipient structure using a COSE-HPKE algorithm.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key that the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This section defines the Recipient_structure, which is used in place of COSE_KDF_Context
for COSE-HPKE recipients. It MUST be used for COSE-HPKE recipients, as it provides
integrity protection for recipient-protected header parameters.</t>

<t>The Recipient_structure is modeled after the Enc_structure defined in <xref target="RFC9052"/>,
but is specific to COSE_recipient structures and MUST NOT be used with COSE_Encrypt.</t>

<t>Furthermore, the use of COSE_KDF_Context is prohibited in COSE-HPKE; it MUST NOT be
used.</t>

<figure><artwork><![CDATA[
Recipient_structure = [
    context: "HPKE Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_extra_info: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a where the attacker manipulates the content-encryption
algorithm identifier. This attack has been demonstrated against CMS and the mitigation
can be found in <xref target="I-D.ietf-lamps-cms-cek-hkdf-sha256"/>.</t>
  <t>"recipient_protected_header" contains the protected header parameters from the COSE_recipient
CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements",
specified in <xref section="4.2.1" sectionFormat="of" target="RFC8949"/>.</t>
  <t>"recipient_extra_info" contains any additional context the application wishes to include in
the key derivation via the HPKE info parameter. If none, it is a zero-length string.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it
MUST be in the protected header parameters and MUST be a COSE-HPKE algorithm.</t>

<t>The protected header MAY contain the kid parameter to identify the static recipient
public key that the sender used. Use of the 'kid' parameter is RECOMMENDED
to explicitly identify the static recipient public key used by the sender.
Including it in the protected header parameters ensures that it is input into the
key derivation function of HPKE.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw key for the next layer down.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be placed raw in the ciphertext field in the COSE_recipient.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>ct: The contents of the layer ciphertext field.</t>
</list></t>

<t>The plaintext output is the raw key for the next layer down.</t>

<t>It is not necessary to populate recipient_aad, as HPKE inherently mitigates the classes of
attacks that COSE_KDF_Context, and SP800-56A are designed to address. COSE-HPKE use cases
may still utilize recipient_aad for other purposes as needed; however, it is generally
intended for small values such as identifiers, contextual information, or secrets. It is
not designed for protecting large or bulk external data.</t>

<t>Any bulk external data that requires protection should be handled at layer 0 using external_aad.</t>

<t>The COSE_recipient structure is computed for each recipient.</t>

<t>When encrypting the content at layer 0, the instructions in <xref section="5.3" sectionFormat="of" target="RFC9052"/> MUST be followed, including the calculation of the
authenticated data structure.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>If the "kty" field is "AKP", then the public and private keys SHALL be the raw HPKE public and private
keys (respectively) for the KEM used by the algorithm.</t>
  <t>Otherwise, the key MUST be suitable for the KEM used by the algorithm. In case the "kty" parameter
is "EC2" or "OKP", this means the value of "crv" parameter is suitable. The valid combinations of
KEM, "kty" and "crv" for the algorithms defined in this document are shown in <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
A COSE-HPKE algorithm is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>The HPKE mode is determined by the presence or absence of the
'psk_id' parameter and is therefore not explicitly indicated in the
ciphersuite.</t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document and the values registered in the HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Ciphersuite Label                                | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-0                                           |0x10 | 0x1 | 0x1  |
| HPKE-1                                           |0x11 | 0x2 | 0x2  |
| HPKE-2                                           |0x12 | 0x3 | 0x2  |
| HPKE-3                                           |0x20 | 0x1 | 0x1  |
| HPKE-4                                           |0x20 | 0x1 | 0x3  |
| HPKE-5                                           |0x21 | 0x3 | 0x2  |
| HPKE-6                                           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>The following list maps the ciphersuite labels to their textual
description.</t>

<t><list style="symbols">
  <t>HPKE-0: DHKEM(P-256, HKDF-SHA256) KEM, HKDF-SHA256 KDF and AES-128-GCM AEAD.</t>
  <t>HPKE-1: DHKEM(P-384, HKDF-SHA384) KEM, HKDF-SHA384 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-2: DHKEM(P-521, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-3: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and AES-128-GCM AEAD.</t>
  <t>HPKE-4: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and ChaCha20Poly1305 AEAD.</t>
  <t>HPKE-5: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-6: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and ChaCha20Poly1305 AEAD.</t>
</list></t>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extent to strike a balance between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA COSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that constitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE algorithm uniquely determines the KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the KEM used, COSE_Key type, and its curve/key subtype.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| HPKE KEM id         | COSE_Key     |
|                     | kty | crv    |
+---------------------+-----+--------+
| 0x0010, 0x0013      | EC2 | P-256  |
| 0x0011, 0x0014      | EC2 | P-384  |
| 0x0012, 0x0015      | EC2 | P-521  |
| 0x0020              | OKP | X25519 |
| 0x0021              | OKP | X448   |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that show all COSE message types
(COSE_Encrypt0 and COSE_Encrypt) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Integrated Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Integrated Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-0</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-0 (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of key encryption using the COSE_Encrypt structure using HPKE is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following input parameters:</t>

<t><list style="symbols">
  <t>Content encryption algorithm: AES-128-GCM</t>
  <t>plaintext: "This is the payload."</t>
  <t>kid:"alice"</t>
  <t>alg: HPKE-0 - DHKEM(P-256, HKDF-SHA256), KDF: HKDF-SHA256, AEAD: AES-128-GCM</t>
  <t>external_aad: "some externally provided aad"</t>
</list></t>

<t>Alice uses the following NIST P-256 ECC keys.</t>

<t>Private Key:</t>

<figure><artwork><![CDATA[
0xaf, 0xf9, 0x07, 0xc9, 0x9f, 0x9a, 0xd3, 0xaa,
0xe6, 0xc4, 0xcd, 0xf2, 0x11, 0x22, 0xbc, 0xe2,
0xbd, 0x68, 0xb5, 0x28, 0x3e, 0x69, 0x07, 0x15,
0x4a, 0xd9, 0x11, 0x84, 0x0f, 0xa2, 0x08, 0xcf
]]></artwork></figure>

<t>Public Key:</t>

<figure><artwork><![CDATA[
/* SEC Serialization of X and Y */
0x04,

/* X & Y */
0x65, 0xed, 0xa5, 0xa1, 0x25, 0x77, 0xc2, 0xba,
0xe8, 0x29, 0x43, 0x7f, 0xe3, 0x38, 0x70, 0x1a,
0x10, 0xaa, 0xa3, 0x75, 0xe1, 0xbb, 0x5b, 0x5d,
0xe1, 0x08, 0xde, 0x43, 0x9c, 0x08, 0x55, 0x1d,

0x1e, 0x52, 0xed, 0x75, 0x70, 0x11, 0x63, 0xf7,
0xf9, 0xe4, 0x0d, 0xdf, 0x9f, 0x34, 0x1b, 0x3d,
0xc9, 0xba, 0x86, 0x0a, 0xf7, 0xe0, 0xca, 0x7c,
0xa7, 0xe9, 0xee, 0xcd, 0x00, 0x84, 0xd1, 0x9c
]]></artwork></figure>

<t>As a result, the following COSE_Encrypt payload is
created:</t>

<figure><artwork><![CDATA[
d8 60 84 43 a1 01 01 a1 05 50 7f 55 a2 6b 98 c0 
49 b4 28 a7 cf 25 9d c3 0e 54 58 23 3f ae 53 ee 
83 55 ee 40 4e 86 7c 00 74 f8 c3 8c 6d 13 6b 65 
bb 61 93 92 79 b4 38 48 c5 8c b6 a4 76 03 55 81 
83 4b a2 01 18 23 04 45 61 6c 69 63 65 a1 23 58 
41 04 fe 73 6d 1d 93 11 4d f6 11 3b c2 87 cd 8e 
63 67 e1 0a b4 78 d7 fe df ac a1 6e 12 6f f0 16 
d6 95 d5 f7 22 34 03 e3 99 60 75 55 bc cf b9 65 
17 5f 49 14 e0 47 73 f7 04 07 5b 46 58 bf 7a dd 
84 a3 58 20 55 12 c2 35 7d 4c b6 bd 23 8a 5f bc 
10 84 b6 c9 74 0a c2 41 1d 93 63 7a 51 e6 9d 51 
0b 4f ae f8 
]]></artwork></figure>

<t>Decoded, this hex-sequence has the following
content:</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

  96([
       / alg = AES-128-GCM (1) /
       h'A10101',
       {
           / iv /
           5: h'33739C468ACB8EEC693C563EAEA12DD0'
       },
       / ciphertext /
       h'\
1F3EE9966D5CEE016E49365CF366FD608F271FC3B5ABDD5253844EE38EE6ABB7F555\
                                                                 9A',
       [
           [
               / alg = HPKE-0 (35), kid = 'alice' /
               h'A20118230445616C696365',
               {
                   / ek /
                   -4: h'\
040506BE8D9C2AFE42D3330676A3F616BAE02F6779D962449F26759B8D1E8F4DF10C\
      9F344627DEB063EE1DDB4858A5E7605BD09ECEB409B037E6E61F44D1E946C1'
               },
               / ciphertext containing encrypted CEK /
               h'\
    B11361397A19E9C155C3E0E8117B5E88155600E550DDE03DC834A46A182DE6F1'
           ]
       ]
   ])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<t>Bob uses the following signature key to sign the COSE_Encrypt payload
without any additional data.</t>

<t>Private Key:</t>

<figure><artwork><![CDATA[
0xd9, 0xb5, 0xe7, 0x1f, 0x77, 0x28, 0xbf, 0xe5,
0x63, 0xa9, 0xdc, 0x93, 0x75, 0x62, 0x27, 0x7e,
0x32, 0x7d, 0x98, 0xd9, 0x94, 0x80, 0xf3, 0xdc,
0x92, 0x41, 0xe5, 0x74, 0x2a, 0xc4, 0x58, 0x89
]]></artwork></figure>

<t>The output of the message is as follows:</t>

<figure title="COSE_Sign1 Example" anchor="hpke-example-sign"><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

18([
       / alg = ES256 (-7) /
       h'A10126',
       {
          / kid = 'bob' /
          4: h'626F62'
       },
       / payload / h'\
D8608443A10101A1055033739C468ACB8EEC693C563EAEA12DD058231F3EE9966D5C\
EE016E49365CF366FD608F271FC3B5ABDD5253844EE38EE6ABB7F5559A81834BA201\
18230445616C696365A1235841040506BE8D9C2AFE42D3330676A3F616BAE02F6779\
D962449F26759B8D1E8F4DF10C9F344627DEB063EE1DDB4858A5E7605BD09ECEB409\
B037E6E61F44D1E946C15820B11361397A19E9C155C3E0E8117B5E88155600E550DD\
                                            E03DC834A46A182DE6F1',   
       / Signature /
       h'\
7F9A83D1753E6FA8475A1250A786DA3E680265949A0AEE1984895A406E41AE8A2966\
        38CA64AE270C5317829BD3968EF76C42DF1566DADC9A68B06BA6ED376B8A'
  ])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-0"><name>KEM Public Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375
              e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af
              7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-0"><name>KEM Private Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f7
              45228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72
              ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04
              e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-4"><name>KEM Public Key for HPKE-4</name>

<figure title="Key Representation Example for HPKE-4" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-4 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa
              9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>Both HPKE and HPKE COSE assume that the sender possesses the recipient's
public key. Therefore, some form of public key distribution mechanism is
assumed to exist, but this is outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generation are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_Mac, or COSE_Mac0 can be
used to add authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_Mac, 
or COSE_Mac0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<section anchor="hpke-0"><name>HPKE-0</name>

<t><list style="symbols">
  <t>Name: HPKE-0</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-1"><name>HPKE-1</name>

<t><list style="symbols">
  <t>Name: HPKE-1</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-2"><name>HPKE-2</name>

<t><list style="symbols">
  <t>Name: HPKE-2</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-3"><name>HPKE-3</name>

<t><list style="symbols">
  <t>Name: HPKE-3</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-4"><name>HPKE-4</name>

<t><list style="symbols">
  <t>Name: HPKE-4</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-5"><name>HPKE-5</name>

<t><list style="symbols">
  <t>Name: HPKE-5</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-6"><name>HPKE-6</name>

<t><list style="symbols">
  <t>Name: HPKE-6</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<section anchor="ek-header-parameter"><name>ek Header Parameter</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
<section anchor="pskid-header-parameter"><name>psk_id Header Parameter</name>

<t><list style="symbols">
  <t>Name: psk_id</t>
  <t>Label: TBDX (Assumed: -5)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: A key identifier (kid) for the pre-shared key
as defined in <xref section="5.1.2" sectionFormat="of" target="RFC9180"/></t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC8949">
  <front>
    <title>Concise Binary Object Representation (CBOR)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
      <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="94"/>
  <seriesInfo name="RFC" value="8949"/>
  <seriesInfo name="DOI" value="10.17487/RFC8949"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="3" month="March" year="2025"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-06"/>
   
</reference>


<reference anchor="I-D.ietf-lamps-cms-cek-hkdf-sha256">
   <front>
      <title>Encryption Key Derivation in the Cryptographic Message Syntax (CMS) using HKDF with SHA-256</title>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <date day="19" month="September" year="2024"/>
      <abstract>
	 <t>   This document specifies the derivation of the content-encryption key
   or the content-authenticated-encryption key in the Cryptographic
   Message Syntax (CMS) using HMAC-based Extract-and-Expand Key
   Derivation Function (HKDF) with SHA-256.  The use of this mechanism
   provides protection against where the attacker manipulates the
   content-encryption algorithm identifier or the content-authenticated-
   encryption algorithm identifier.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-lamps-cms-cek-hkdf-sha256-05"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>
<reference anchor="NIST.SP.800-56Ar3" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>National Institute of Standards and Technology</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>

</references>


<?line 803?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like to thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank
Michael B. Jones,
John Mattsson,
Mike Prorock,
Michael Richardson,
Thomas Fossati,
and
GÃ¶ran Selander
for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
G44ZE6sfT9wyB1HOCuIolJWZ9f8AGNTcbYh1AAA=

-->

</rfc>

