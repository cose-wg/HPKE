<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.4 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-08" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <postal>
          <country>Austria</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2024" month="March" day="16"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 60?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by one of the authenticated
variants of HPKE.</t>

<t>This document defines the use of the HPKE with COSE.</t>



    </abstract>



  </front>

  <middle>


<?line 74?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Direct Encryption mode, where HPKE is used to encrypt the plaintext. This mode can only be used with a single recipient. <xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a content encryption key (CEK) and the CEK is subsequently used to encrypt the plaintext. This mode supports multiple recipients. <xref target="two-layer"/> 
  provides the details.</t>
</list></t>

<t>In both cases a new COSE header parameter, called 'ek',
is used to convey the content of the enc structure defined in the HPKE
specification. "Enc" represents the serialized public key.</t>

<t>For use with HPKE the 'ek' header parameter MUST
be present in the unprotected header parameter and MUST contain
the encapsulated key, which is output of the HPKE KEM, and it
is a bstr.</t>

<section anchor="one-layer"><name>HPKE Direct Encryption Mode</name>

<t>With the HPKE Direct Encryption mode the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext and the resulting ciphertext
is either included in the COSE_Encrypt0 or is detached. If a payload is
transported separately then it is called "detached content". A nil CBOR
object is placed in the location of the ciphertext. See Section 5
of <xref target="RFC9052"/> for a description of detached payloads.</t>

<t>The sender MUST place the 'ek' (encapsulated key) parameter into the unprotected
header.</t>

<t>The sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>This specification RECOMMENDS the inclusion of parameters describing the
context of the transaction in the protected header. Section 5.2
of <xref target="RFC9053"/> defines several parameters for this purpose, such as PartyU
and PartyV identity and nonce, which are re-used by this specification.
PartyU refers to the entity that is creating the message and PartyV refers
to the entity that is receiving the message. The context information
parameters are, unlike described in <xref target="RFC9053"/>, not used to build the
COSE_KDF_Context structure, as explained below.</t>

<t>The HPKE specification describes an API and uses an "aad" parameter
as input. When COSE_Encrypt0 is used then there is no AEAD function executed
by COSE natively and HPKE instead offers this functionality.</t>

<t>The "aad" parameter provided to the HPKE API MUST be constructed as follows
(and the design has been re-used from <xref target="RFC9052"/>).</t>

<figure><artwork><![CDATA[
Enc_structure = [
    context : "Encrypt0",
    protected : empty_or_serialized_map,
    external_aad : bstr
]

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0
]]></artwork></figure>

<t>The protected field in the Enc_structure contains the protected attributes
from the COSE_Encrypt0 structure, encoded in a bstr type.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL used for the HPKE Direct Encryption Mode" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>With the HPKE Key Encryption mode information is conveyed in the COSE_recipient
structure, i.e. one COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the HPKE 
alg parameter and the unprotected header MUST contain the 'ek' parameter.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<t>The COSE_recipient structure, shown in <xref target="cddl-hpke"/>, is repeated for each
recipient.</t>

<figure title="CDDL used for the HPKE Key Encryption Mode" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>The sender MUST place the 'ek' (encapsulated key) parameter into the unprotected
header.</t>

<t>The sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>This specification RECOMMENDS the inclusion of parameters describing the
context of the transaction in the protected header. Section 5.2
of <xref target="RFC9053"/> defines several parameters for this purpose, such as PartyU
and PartyV identity and nonce, which are re-used by this specification.</t>

<t>At the recipient layer where HPKE is used to encrypt the CEK, the "aad" parameter
provided to the HPKE API MUST be constructed as follows (and the design has
been re-used from <xref target="RFC9052"/>):</t>

<figure><artwork><![CDATA[
Enc_structure = [
    context : "Enc_Recipient",
    protected : empty_or_serialized_map,
    external_aad : bstr
]

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0
]]></artwork></figure>

<t>The protected field in the Enc_structure contains the protected attributes 
from the COSE_recipient structure at layer 1, encoded in a bstr type.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>The "kty" field MUST be present, and it MUST be one of the key types for HPKE KEM.</t>
  <t>If the "kty" field is "OKP" or "EC2", the "crv" field MUST be present
and it MUST be a curve for HPKE KEM.</t>
  <t>If the "alg" field is present, it MUST be one of the supported COSE-HPKE "alg" values
and the key type of its KEM MUST match the "kty" field.
If the "kty" field is "OKP" or "EC2", the curve of the KEM MUST match the "crv" field.
The valid combinations of the "alg", "kty" and "crv" are shown in <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
An HPKE ciphersuite, is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>For readability the algorithm ciphersuites labels are built according
to the following scheme:</t>

<figure><artwork><![CDATA[
HPKE-<Mode>-<KEM>-<KDF>-<AEAD>
]]></artwork></figure>

<t>The "Mode" indicator may be populated with the following values from
Table 1 of <xref target="RFC9180"/>:</t>

<t><list style="symbols">
  <t>"Base" refers to "mode_base" described in Section 5.1.1 of <xref target="RFC9180"/>,
which only enables encryption to the holder of a given KEM private key.</t>
  <t>"PSK" refers to "mode_psk", described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>
  <t>"Auth" refers to "mode_auth", described in Section 5.1.3 of <xref target="RFC9180"/>,
which authenticates using an asymmetric key.</t>
  <t>"Auth_Psk" refers to "mode_auth_psk", described in Section 5.1.4 of <xref target="RFC9180"/>,
which authenticates using both a PSK and an asymmetric key.</t>
</list></t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document, which all use the "Base" mode and the values registered in the
HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Cipher Suite Label                               | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-Base-P256-SHA256-AES128GCM                  |0x10 | 0x1 | 0x1  |
| HPKE-Base-P384-SHA384-AES256GCM                  |0x11 | 0x2 | 0x2  |
| HPKE-Base-P521-SHA512-AES256GCM                  |0x12 | 0x3 | 0x2  |
| HPKE-Base-X25519-SHA256-AES128GCM                |0x20 | 0x1 | 0x1  |
| HPKE-Base-X25519-SHA256-ChaCha20Poly1305         |0x20 | 0x1 | 0x3  |
| HPKE-Base-X448-SHA512-AES256GCM                  |0x21 | 0x3 | 0x2  |
| HPKE-Base-X448-SHA512-ChaCha20Poly1305           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extend to maintain the tradeoff between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA CoSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that consitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE ciphersuite uniquely determines the type of KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the COSE-HPKE ciphersuite, COSE_Key type and its curve.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| COSE-HPKE           | COSE_Key     |
| Ciphersuite Label   | kty | crv    |
+---------------------+-----+--------+
| HPKE-Base-P256-\*   | EC2 | P-256  |
| HPKE-Base-P384-\*   | EC2 | P-384  |
| HPKE-Base-P521-\*   | EC2 | P-521  |
| HPKE-Base-X25519-\* | OKP | X25519 |
| HPKE-Base-X448-\*   | OKP | X448   |
| HPKE-Base-CP256-\*  | EC2 | P-256  |
| HPKE-Base-CP384-\*  | EC2 | P-384  |
| HPKE-Base-CP521-\*  | EC2 | P-521  |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that shows all COSE message types
(COSE_Encrypt0, COSE_Encrypt and COSE_MAC) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Direct Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Direct Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-Base-P256-SHA256-AES128GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>PartyU identity: "sender"</t>
  <t>PartyV identity: "recipient"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-Base-P256-SHA256-AES128GCM (Assumed: 35) /
    / PartyU identity (-21) /
    / PartyV identity (-24) /
    h'A3011823346673656E6465723769726563697069656E74',
    {
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>Encryption alg: AES-128-GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>detatched ciphertext: h'cc168c4e148c52a83010a75250935a47ccb8682deebcef8fce5d60c161e849f53a2dc664'</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-AES128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'97ad883f949f4cdcb1301b9446950efd4eb519e16c4a3d78304eec832692f9f6'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'b8ed3f4df56c230e36fa6620a47f24d08856d242ea547c5521ff7bd69af8fd6f'</t>
    </list></t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
96_0([
    / alg = AES-128-GCM (1) /
    h'a10101',
    {
        / iv /
        5: h'b3fb95dde18c6f90a9f0ae55',
    },
    / detached ciphertext /
    null,
    [
        [
            / alg = HPKE-Base-P256-SHA256-AES128GCM (Assumed: 35) /
            h'a1011823',
            {
                / ek /
                -4: h'04d97b79486fe2e7b98fb1bd43
                      c4faee316ff38d28609a1cf568
                      40a809298a91e601f1cc0c2ba4
                      6cb67b41f4651b769cafd9df78
                      e58aa7f5771291bd4f0f420ba6',
            },
            / ciphertext containing encrypted CEK /
            h'24450f54ae93375351467d17aa7a795cfede2
              c03eced1ad21fcb7e7c2fe64397',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid /
                4: h'3032',
                / ek /
                -4: h'd1afbdc95b0e735676f6bca34f
                      be50f2822259ac09bfc3c500f1
                      4a05de9b2833',
            },
            / ciphertext containing encrypted CEK /
            h'079b443ec6dfcda6a5f8748aff3875146a8ed
              40359e1279b545166385d8d9b59',
        ],
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
<section anchor="cosemac"><name>COSE_MAC</name>

<t>An example of the COSE_MAC structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-mac"/>.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>MAC alg: HMAC 256/256</t>
  <t>payload: "This is the content."</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-AES128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'e5dd9472b5807636c95be0ba2575020ba91cbb3561b52be141da89678c664307'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'78a49d7af71b5244498e943f361aa0250184afc48b8098a68ae97ccd2cd7e56f'</t>
    </list></t>
</list></t>

<figure title="COSE_MAC Example for HPKE" anchor="hpke-example-cose-mac"><artwork><![CDATA[
97_0([
    / alg = HMAC 256/256 (5) /
    h'a10105',
    {},
    / payload = 'This is the content.' /
    h'546869732069732074686520636f6e74656e742e',
    / tag /
    h'5cdcf6055fcbdb53b4001d8fb88b2a46b200ed28e1ed77e16ddf43fb3cac3a98',
    [
        [
            / alg = HPKE-Base-P256-SHA256-AES128GCM (Assumed: 35) /
            h'a1011823',
            {
                / kid = '01' /
                4: h'3031',
                / ek /
                -4: h'043ac21632e45e1fbd733f002a
                      621aa4f3d94737adc395d5a7cb
                      6e9554bd1ad273aec991493786
                      d72616d9759bf8526e6e20c1ed
                      c41ba5739f2b2e441781aa0eb4',
            },
            / ciphertext containing encrypted MAC key /
            h'5cee2b4235a7ff695164f7a8d1e79ccf3ca3d
              e8b22f3592626020a95b2a8d3fb4d7aa7fe37
              432426ee70073a368f29d1',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid = '02' /
                4: h'3032',
                / ek /
                -4: h'02cffacc60def3bb3d0a1c3661
                      227c9de8dc2b1d3939dd2c07d4
                      49ebb0bba324',
            },
            / ciphertext containing encrypted MAC key /
            h'3f5b8b60271d5234dbea554dc1461d0239e9f
              4589f6415e8563b061dbcb37795a616111b78
              2b4c589b534309327ffadc',
        ],
    ],
])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-base-p256-sha256-aes128gcm"><name>KEM Public Key for HPKE-Base-P256-SHA256-AES128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-AES128GCM" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-AES128GCM (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-base-p256-sha256-aes128gcm"><name>KEM Private Key for HPKE-Base-P256-SHA256-AES128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-AES128GCM" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-AES128GCM (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f745228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-base-x25519-sha256-chacha20poly1305"><name>KEM Public Key for HPKE-Base-X25519-SHA256-CHACHA20POLY1305</name>

<figure title="Key Representation Example for HPKE-Base-X25519-SHA256-CHACHA20POLY1305" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist but outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generations are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0 can be
used to add authentication. HPKE also offers modes that offer authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-Base-P256-SHA256-AES128GCM</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P384-SHA384-AES256GCM</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P521-SHA512-AES256GCM</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-AES128GCM</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-ChaCha20Poly1305</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-AES256GCM</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-ChaCha20Poly1305</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[This specification]]</t>
</list></t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="5" month="February" year="2024"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-04"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>


    </references>


<?line 759?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank John Mattsson, Mike Prorock, Michael Richardson,
and Goeran Selander for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
6bXXxwXoJNKhOgnwnk4CHL7TD8MQ/hi++4mSEvPEiy0r4YBAUZRFCaCw6SWZ
G0fCppQhWSFYmsD1bDuEr+C2FWGRU5+bkciyPZJim5YTwk3baB37qecDO5sZ
B0CHVTJd7nAfCBUuPaHcjh/7WewT6orjLLEAbbtu21SJMvc/G/zP7pNA+39C
AvcZny+EBbsk8eWzVwNJtCaSaE0k0bpHEn+C03foy0TIVDdDKXN3S1kSB4kZ
Ye1jAPYkACQyQyFML47iOHUQs3geIhiBBYxTF4AQv0UUOVYMX+4mtn3/ujlf
vW73069qW7rXwJ6V8lVMurwc3qsWyZxK4j7vPAuKC3Q+gd4ZqGL0tuq7O5uS
jDuUSZb+JZLy9YV0XBJTFkwWsSSyQkyWsMg6wB3nLtVIXR1El4SSbxiQO3ai
rgc5qnve40cTVv2p+hZ+3XbJV3rPUW5i1Qv2RMjjobKchspcpMvue06pLpFO
FFLxS/9OUipUVQImD4FSeSmL6ZVdm6Z751WdlGudBxm84rIltBJLOudObh+D
b6pEPlph4uWqoM1F9f5HfsPzpeRdWejiyJs8EcNqWCoUNbrqFNrInJ7K14dT
5YF0OcDyrnthQjo5QmeIot5U8iU4+gx+V91Zdy/2oVf36hdTqQ5ZsVnR+251
r+olkFWbl6G3bbXv/CoYia86TJCWopa1kDtTkVy+9GHrNWgLpreRDXrTnFrg
7vxszeSriLrM42yQhJx1yagZ00Vh9MVsi63aciaeppOp6DfnSunVb/RRryeU
PNo1eXr5Rzbe722H3HrbkM6W7to6avSLiIzRi/10VZistrqU6qjTisS1m5x/
mXxjRH+3DEl5I/Qp6x2zAePbAi7igJQXJSxGJyu7iJBsk4W8OelavXPe+n0c
eT0jqTK6ymyZPqF1pjeXyhc80TkL1fvwHPZavvNW7JuEQcpJVc668vZywyG4
jVDVugXA+6BfWWzL2kLlieWUp1imr62taG1qSJ9so2WIXoCoj8no0udDKazd
Cbv6UBnWkhn9XfWmAyqg0SffD9uidZiLvgp40Ev/+mpjztj36q3sXyyPYn+i
qZ2wt9+eW2MARzfP+5fNnbQnY1St7LieslXnF+rFgbzpU7LnT6CsRxLEzdiT
Z+ff6Vk8Vu8ylCrdX5XF1q2bGW7Y0rpQqR4742tVrAA+AC4CULyTl2GRL4V8
x2wFYyOqE/b04s0f6NZrOvBFInfC2I8/gtATJWQwYO/eqQdUpURKlP+FakB3
MXDXqZkxA50hA4NfmoEYuGcgvuxgIJXdysL3IQdpxX8dHNx1XmjMwSFgc6Jf
moMYv+cgZrGDg7j6K+bgnpNSYx4GQ9Br/bI8VBN4oB7Pfp2KfP8xsTEvw3EA
8Wvg5dZJsv99hu46LzfmYzTko/ML8xHD/4ur9T0HBScu2hwy0v0VMPJ/WRxb
GLQFlwaMFtf0WR7ukUz8rwEP54qHksPy1IZ+j013rQVVJ+z749MtdkvGTg8C
TEgBJVthLshR/xhIzJNr/W8VqPiypKn/GThXHhCTUQzWqrjeOouR5jd5ugGo
bl+PkcsX2HVRaveSV/3SIDq6It/IPNp116+Y7k5KSmb2EaMxeLM/W5b6nxRZ
qrec0j8jI99fSFEvAuRkI+NyufX+OkeIXKWQuKqgfzmHPV3yKmfP8019w7FI
hvFdrmPW2zGxpab3NXpjT8pNvRTq4Oi34GfKqbAYkL0n2hgR3UJs+W8rUeiY
lHP1r8TIJHxeQBz5kiG+kYcRJcI/Ta6L8nYp0ksZ1Gzzv53SH8srDM+bpq5L
xFQv6OarqqzK5Jq+gWKxbCmnJ+S7qP5QCprvG7HkMo3RrxadrUVskCH6IDFY
GP8NMIDHlpFqAAA=

-->

</rfc>

