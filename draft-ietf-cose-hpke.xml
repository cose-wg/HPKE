<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.14 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-09" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization abbrev="H-BRS">University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2024" month="December" day="13"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 62?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by one of the authenticated
variants of HPKE.</t>

<t>This document defines the use of the HPKE with COSE.</t>



    </abstract>



  </front>

  <middle>


<?line 76?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Direct Encryption mode, where HPKE is used to encrypt the plaintext. This mode can only be used with a single recipient. <xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a content encryption key (CEK) and the CEK is subsequently used to encrypt the plaintext. This mode supports multiple recipients. <xref target="two-layer"/> 
  provides the details.</t>
</list></t>

<t>In both cases a new COSE header parameter, called 'ek',
is used to convey the content of the enc structure defined in the HPKE
specification. "Enc" represents the serialized public key.</t>

<t>For use with HPKE the 'ek' header parameter MUST
be present in the unprotected header parameter and MUST contain
the encapsulated key, which is output of the HPKE KEM, and it
is a bstr.</t>

<section anchor="one-layer"><name>HPKE Direct Encryption Mode</name>

<t>This mode is selected if COSE_Encrypt0 structure uses a COSE-HPKE algoritm.</t>

<t>Because there are no recipients, COSE_Encrypt structure MUST NOT be used.</t>

<t>Because COSE-HPKE supports header protection by definition, if 'alg' parameter is present, it MUST be in protected bucket, and SHALL be a COSE-HPKE algorithm.</t>

<t>Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this documents RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 contains the 'kid' then the recipient may
use it to select the appropriate private key.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: empty string.</t>
  <t>aad: Canonical encoding of the Enc_structure from <xref target="RFC9052"/>).</t>
  <t>pt: The raw message plaintext.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be used as layer ciphertext. If not using detached content, this is directly placed as
ciphertext in COSE_Encrypt0 structure. Otherwise, it is transported separately and the ciphertext field is nil.
See Section 5 of <xref target="RFC9052"/> for a description of detached payloads.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: empty string.</t>
  <t>aad: Canonical encoding of the Enc_structure from <xref target="RFC9052"/>).</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext.</t>
</list></t>

<t>The plaintext output is the raw message plaintext.</t>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>This mode is selected if COSE_recipient structure uses a COSE-HPKE algorithm.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the COSE_recipient structure using a COSE-HPKE algorithm.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This describes the Recipient_structure.
It serves instead of COSE_KDF_Context for COSE-HPKE recipients (and possibly other COSE algorithms defined outside this document).
It MUST be used for COSE-HPKE recipients as it provides the protection for recipient protected headers.
It is patterned after the Enc_structure in <xref target="RFC9052"/>, but is specifically for a COSE_recipient, never a COSE_Encrypt.
The COSE_KDF_Context MUST NOT be used in COSE-HPKE.</t>

<figure><artwork><![CDATA[
Recipient_structure = [ 
    context: "Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_aad: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a person-in-the-middle changes the following layer algorithm from an AEAD algorithm to one that is not foiling the protection of the following layer headers).</t>
  <t>"recipient_protected_header" contains the protected headers from the COSE_recipient CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements", specified in Section 4.2.1 of RFC 8949 <xref target="STD94"/>.</t>
  <t>"recipient_aad" contains any additional context the application wishes to protect.
If none, it is a zero-length string.
This is distinct from the external_aad for the whole COSE encrypt.
It is per-recipient.
Since it is not a header, it may be secret data that is not transmitted.
It provides a means to convey many of the fields in COSE_KDF_Context.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>Because COSE-HPKE supports header protection by definition, if 'alg' parameter is present, it MUST be in protected bucket, and SHALL be a COSE-HPKE algorithm.</t>

<t>The unprotected header MAY contain the kid parameter to identify the static recipient public key the sender used.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: empty string.</t>
  <t>aad: Canonical encoding of the Recipient_structure.</t>
  <t>pt: The raw key for the next layer down.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be placed raw in the ciphertext field in the COSE_recipient.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: empty string.</t>
  <t>aad: Canonical encoding of the Recipient_structure.</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext field.</t>
</list></t>

<t>The plaintext output is the raw key for the next layer down.</t>

<t>It is not necessary to fill in recipient_aad as HPKE itself covers the attacks that recipient_aad (and COSE_KDF_Context (and SP800-56A)) are used to mitigate.
COSE-HPKE use cases may use it for any purpose they wish, but it should generally be for small identifiers, context or secrets, not to protect bulk external data.
Bulk external data should be protected at layer 0 with external_aad.</t>

<t>The COSE_recipient structure is repeated for each recipient.</t>

<t>When encrypting the content at layer 0 then the instructions in
Section 5.3 of <xref target="RFC9052"/> MUST to be followed, which includes the
calculation of the authenticated data strcture.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>If the "kty" field is "AKP", then the public and private keys SHALL be raw HPKE public and private
keys (respectively) for the KEM used by the algorithm.</t>
  <t>Otherwise, the key MUST be suitable for the KEM used by the algorithm. In case the "kty" parameter
is "EC2" or "OKP", this means the value of "crv" parameter is suitable. For the algorithms defined in
this document, the valid combinations of the KEM, "kty" and "crv" are shown in  <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
A COSE-HPKE algorithm is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>For readability the algorithm ciphersuites labels are built according
to the following scheme:</t>

<figure><artwork><![CDATA[
HPKE-<Version>-<Mode>-<KEM>-<KDF>-<AEAD>
]]></artwork></figure>

<t>The "Mode" indicator may be populated with the following values from
Table 1 of <xref target="RFC9180"/>:</t>

<t><list style="symbols">
  <t>"Base" refers to "mode_base" described in Section 5.1.1 of <xref target="RFC9180"/>,
which only enables encryption to the holder of a given KEM private key.</t>
  <t>"PSK" refers to "mode_psk", described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>
  <t>"Auth" refers to "mode_auth", described in Section 5.1.3 of <xref target="RFC9180"/>,
which authenticates using an asymmetric key.</t>
  <t>"Auth_Psk" refers to "mode_auth_psk", described in Section 5.1.4 of <xref target="RFC9180"/>,
which authenticates using both a PSK and an asymmetric key.</t>
</list></t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document, which all use the "Base" mode and the values registered in the
HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Cipher Suite Label                               | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-Base-P256-SHA256-A128GCM                    |0x10 | 0x1 | 0x1  |
| HPKE-Base-P384-SHA384-AS256GCM                   |0x11 | 0x2 | 0x2  |
| HPKE-Base-P521-SHA512-AS256GCM                   |0x12 | 0x3 | 0x2  |
| HPKE-Base-X25519-SHA256-A128GCM                  |0x20 | 0x1 | 0x1  |
| HPKE-Base-X25519-SHA256-ChaCha20Poly1305         |0x20 | 0x1 | 0x3  |
| HPKE-Base-X448-SHA512-AS256GCM                   |0x21 | 0x3 | 0x2  |
| HPKE-Base-X448-SHA512-ChaCha20Poly1305           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extend to maintain the tradeoff between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA CoSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that consitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE algorithm uniquely determines the KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the KEM used, COSE_Key type and its curve/key subtype.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| HPKE KEM id         | COSE_Key     |
|                     | kty | crv    |
+---------------------+-----+--------+
| 0x0010, 0x0013      | EC2 | P-256  |
| 0x0011, 0x0014      | EC2 | P-384  |
| 0x0012, 0x0015      | EC2 | P-521  |
| 0x0020              | OKP | X25519 |
| 0x0021              | OKP | X448   |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that shows all COSE message types
(COSE_Encrypt0, COSE_Encrypt and COSE_MAC) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Direct Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Direct Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following:</t>

<t>TODO: recompute this for Recipient_structure</t>

<t><list style="symbols">
  <t>Encryption alg: AES-128-GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>detatched ciphertext: h'cc168c4e148c52a83010a75250935a47ccb8682deebcef8fce5d60c161e849f53a2dc664'</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'97ad883f949f4cdcb1301b9446950efd4eb519e16c4a3d78304eec832692f9f6'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'b8ed3f4df56c230e36fa6620a47f24d08856d242ea547c5521ff7bd69af8fd6f'</t>
    </list></t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
96_0([
    / alg = AES-128-GCM (1) /
    h'a10101',
    {
        / iv /
        5: h'b3fb95dde18c6f90a9f0ae55',
    },
    / detached ciphertext /
    null,
    [
        [
            / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
            h'a1011823',
            {
                / kid /
                4: h'3031',
                / ek /
                -4: h'04d97b79486fe2e7b98fb1bd43
                      c4faee316ff38d28609a1cf568
                      40a809298a91e601f1cc0c2ba4
                      6cb67b41f4651b769cafd9df78
                      e58aa7f5771291bd4f0f420ba6',
            },
            / ciphertext containing encrypted CEK /
            h'24450f54ae93375351467d17aa7a795cfede2
              c03eced1ad21fcb7e7c2fe64397',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid /
                4: h'3032',
                / ek /
                -4: h'd1afbdc95b0e735676f6bca34f
                      be50f2822259ac09bfc3c500f1
                      4a05de9b2833',
            },
            / ciphertext containing encrypted CEK /
            h'079b443ec6dfcda6a5f8748aff3875146a8ed
              40359e1279b545166385d8d9b59',
        ],
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
<section anchor="cosemac"><name>COSE_MAC</name>

<t>An example of the COSE_MAC structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-mac"/>.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>MAC alg: HMAC 256/256</t>
  <t>payload: "This is the content."</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'e5dd9472b5807636c95be0ba2575020ba91cbb3561b52be141da89678c664307'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'78a49d7af71b5244498e943f361aa0250184afc48b8098a68ae97ccd2cd7e56f'</t>
    </list></t>
</list></t>

<figure title="COSE_MAC Example for HPKE" anchor="hpke-example-cose-mac"><artwork><![CDATA[
97_0([
    / alg = HMAC 256/256 (5) /
    h'a10105',
    {},
    / payload = 'This is the content.' /
    h'546869732069732074686520636f6e74656e742e',
    / tag /
    h'5cdcf6055fcbdb53b4001d8fb88b2a46b200ed28e1ed77e16ddf43fb3cac3a98',
    [
        [
            / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
            h'a1011823',
            {
                / kid = '01' /
                4: h'3031',
                / ek /
                -4: h'043ac21632e45e1fbd733f002a
                      621aa4f3d94737adc395d5a7cb
                      6e9554bd1ad273aec991493786
                      d72616d9759bf8526e6e20c1ed
                      c41ba5739f2b2e441781aa0eb4',
            },
            / ciphertext containing encrypted MAC key /
            h'5cee2b4235a7ff695164f7a8d1e79ccf3ca3d
              e8b22f3592626020a95b2a8d3fb4d7aa7fe37
              432426ee70073a368f29d1',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid = '02' /
                4: h'3032',
                / ek /
                -4: h'02cffacc60def3bb3d0a1c3661
                      227c9de8dc2b1d3939dd2c07d4
                      49ebb0bba324',
            },
            / ciphertext containing encrypted MAC key /
            h'3f5b8b60271d5234dbea554dc1461d0239e9f
              4589f6415e8563b061dbcb37795a616111b78
              2b4c589b534309327ffadc',
        ],
    ],
])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-base-p256-sha256-a128gcm"><name>KEM Public Key for HPKE-Base-P256-SHA256-A128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-A128GCM" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-base-p256-sha256-a128gcm"><name>KEM Private Key for HPKE-Base-P256-SHA256-A128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-A128GCM" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f745228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-base-x25519-sha256-chacha20poly1305"><name>KEM Public Key for HPKE-Base-X25519-SHA256-CHACHA20POLY1305</name>

<figure title="Key Representation Example for HPKE-Base-X25519-SHA256-CHACHA20POLY1305" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist but outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generations are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0 can be
used to add authentication. HPKE also offers modes that offer authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-Base-P256-SHA256-A128GCM</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P384-SHA384-AS256GCM</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P521-SHA512-AS256GCM</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-A128GCM</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-ChaCha20Poly1305</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-AS256GCM</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-ChaCha20Poly1305</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[This specification]]</t>
</list></t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<referencegroup anchor="STD94" target="https://www.rfc-editor.org/info/std94">
  <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
    <front>
      <title>Concise Binary Object Representation (CBOR)</title>
      <author fullname="C. Bormann" initials="C." surname="Bormann"/>
      <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
      <date month="December" year="2020"/>
      <abstract>
        <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
        <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
      </abstract>
    </front>
    <seriesInfo name="STD" value="94"/>
    <seriesInfo name="RFC" value="8949"/>
    <seriesInfo name="DOI" value="10.17487/RFC8949"/>
  </reference>
</referencegroup>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="9" month="September" year="2024"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-05"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>


    </references>


<?line 764?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank John Mattsson, Mike Prorock, Michael Richardson,
and Goeran Selander for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+1963LcyJXmfzwFohSxJO2qEu4X7njCFElZGkktrUjPjKOt
UCSABAmzCigDKFJstfws+yz7ZPudzASQqAtFtbvD3RHD6KaqgLycc/Lc82Ry
NpsZbdEu+LH554abVW6+uE/qIjPfrZNFkc5e8XvzvEzr+1VbVKV5+OLdq/Mj
865or83TZ2/fm2+Tv/G0NS+Kq7Ior0xWZqPmp28vzo8MliQ1vz026ZtJIxhZ
lZZsiUmzmuXtrOBtPkurhs+uVzd8ZsVGylp+VdX3x2bTZoZRrOpjc1Vz3w2j
y3rdtI5lxZZjsJqzY/OCp+u6aO+Nu6q+uaqr9UrOZdzwezzKjs2XZcvrkrez
M5rPMJoWkH5ki6oEDPe8MVbFsfl9W6VTs6nqtuZ5g0/3S/rwwTDYur2u6mNj
ZphmUTbH5ou5edmk11XOy+IKDyUyL1hZ8mb8hi9ZsTg2r8Wredu/+uPV8tMc
EKFJR54Xs2fvL/C9qq9YWfzAiIRYlrK45XUD9Gh1TlarRcEz8yIteJlismdV
Wc7eX/OinF0UnGZMq3XZEuX+xOslK+8HqN/OzYuW8wXvIX5bF3x4VlfEBzwr
2qreguOyZmWzXLd8QKpC7z+23fN5UWZYGTxrdCgAf0sAt1jRZoDlbG6e/A0T
LYsemDNWNOsbrj0fQ5AUSdGyxTB/xv5W4D+QEl/nabXU5/0PtmLlMN/rufl6
XWbJgmUD+q/ZuiYyjl6NJ+14y7y85uBH8/Xr0wGAxdXij41q0Ir3m1CMsTfK
CkvSYkGP0ej981PHtmP1MbJDT32M7cjqPlq+M3x06ePF5VksWhpFmW+MF8Vu
2A0duGKQl7OzeVGTfOX11SwrScLoOcnh7OXJdyf0BT8dj5vqB2SA3OC9fKKU
xEg7mLu1A3Uy3/OrAsxwr3qz+oq3EIO2XTXHT5/e3d3NC1ayOWZ5ypoG6mPJ
y7Z5StCJX/NP1+1yIXtnIB54NW2rhNemYzkuYT+bzSA6mIOlkOjL66IxmxVP
i7xIxdqZGc8LksdrCfNKajToBJNvwQxCmmsoQKHZjEertrkgIwQzh4iazLxl
NdBq8cDYPR1EmNVg45rV97Om+AG8sVqwAurpU9sIKJhZA4kVxLtVIJsYY24Y
YibScKpdeQ82WyZFyfqRS5NBaS05hFD0opnZqlkvZJMlT6GHimZpHr46f3M0
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
atEhVQQFOcIOYoO58f8BDwvE1tpxAAA=

-->

</rfc>

