<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-02" category="std">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="April" day="26"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) encryption function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key. HPKE utilizes a non-interactive ephemeral-static 
Diffie-Hellman exchange to establish a shared secret. The motivation for
standardizing a public key encryption scheme is explained in the introduction
of <xref target="RFC9180"/>.</t>

<t>The HPKE specification defines several features for use with public key encryption
and a subset of those features is applied to COSE <xref target="RFC8152"/>. Since COSE provides
constructs for authentication, those are not re-used from the HPKE specification.
This specification uses the “base” mode, as it is called in HPKE specification
language.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:
- Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.
- Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.
- pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.
- skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>

</section>
<section anchor="hpke-for-cose" title="HPKE for COSE">

<section anchor="overview" title="Overview">

<t>This specification supports two uses of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE in a single sender - single recipient setup.
This use cases uses a one layer structure for efficiency. 
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE in a single sender - multiple recipient setup. 
This use case requires a two layer structure.  <xref target="two-layer"/> 
provides the details.</t>
</list></t>

<t>HPKE in “base” mode requires little information to be exchanged between 
a sender and a recipient, namely</t>

<t><list style="symbols">
  <t>algorithm information,</t>
  <t>the ephemeral public key, and</t>
  <t>an identifier of the static recipient key.</t>
</list></t>

<t>In the subsections below we explain how this information is carried
inside the COSE_Encrypt0 and the COSE_Encrypt1 for the one layer and the
two layer structure, respectively.</t>

<section anchor="one-layer" title="One Layer Structure">

<t>With the one layer structure the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext. The resulting ciphertext
may be included in the COSE_Encrypt0 or may be detached.</t>

<t>A sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>The sender MUST place the kid and ephemeral public key into the unprotected
header.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt0 Structure" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer" title="Two Layer Structure">

<t>With the two layer structure the HPKE information is conveyed in the COSE_recipient structure, i.e. one
COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains content (plaintext)
encrypted with the CEK. This ciphertext may be detached. If not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the algorithm
information and the unprotected header MUST contain the ephemeral public key and the
key id (kid) of the static recipient public key.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.
For example, the content encrypted at layer 0 is a firmware image.  The
same ciphertext firmware image is processed by all of the recipients;
however, each recipient uses their own private key to obtain the CEK.</t>

<t>The COSE_recipient structure shown in <xref target="cddl-hpke"/> is repeated for each
recipient.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
<section anchor="hpke-encryption-with-sealbase" title="HPKE Encryption with SealBase">

<t>The SealBase(pkR, info, aad, pt) function is used to encrypt a plaintext pt to
a recipient’s public key (pkR).</t>

<t>IMPORTANT: For use in cose_encrypt, the plaintext “pt” passed into the 
SealBase is the CEK. The CEK is a random byte sequence of length 
appropriate for the encryption algorithm selected in layer 0. For 
example, AES-128-GCM requires a 16 byte key and the CEK would 
therefore be 16 bytes long. In case of COSE_Encrypt0, the plaintext 
“pt” passed into the SealBase is the raw plaintext.</t>

<t>The “info” parameter can be used to influence the generation of keys and the
“aad” parameter provides additional authenticated data to the AEAD algorithm
in use. This specification does not mandate the use of the info and the aad
parameters.</t>

<t>If SealBase() is successful, it will output a ciphertext “ct” and an encapsulated
key “enc”.  The content of enc is the ephemeral public key.</t>

<t>The content of the info parameter is based on the ‘COSE_KDF_Context’ structure,
which is detailed in <xref target="cddl-cose-kdf"/>.</t>

</section>
<section anchor="hpke-decryption-with-openbase" title="HPKE Decryption with OpenBase">

<t>The recipient will use the OpenBase(enc, skR, info, aad, ct) function with the enc and
ct parameters received from the sender. The “aad” and the “info” parameters are obtained
via the context of the usage.</t>

<t>The OpenBase function will, if successful, decrypt “ct”. When decrypted, the result
will be either the CEK (if using COSE_Encrypt), or the raw plaintext (if using 
COSE_Encrypt0). The CEK is the symmetric key used to decrypt the ciphertext in 
layer 0 of the COSE_Encrypt structure.</t>

</section>
<section anchor="info-structure" title="Info Structure">

<t>This section provides a suggestion for constructing the info structure, when used with
SealBase() and OpenBase(). Note that the use of the aad and the info structures for these
two functions is optional. Profiles of this specification may require their use and may
define different info structure.</t>

<t>This specification re-uses the context information structure defined in
<xref target="RFC8152"/> as a foundation for the info structure. This payload becomes the content
of the info parameter for the HPKE functions, when utilized. For better readability of
this specification the COSE_KDF_Context structure is repeated in <xref target="cddl-cose-kdf"/>.</t>

<figure title="COSE_KDF_Context Data Structure for info parameter" anchor="cddl-cose-kdf"><artwork><![CDATA[
   PartyInfo = (
       identity : bstr / nil,
       nonce : bstr / int / nil,
       other : bstr / nil
   )

   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [ PartyInfo ],
       PartyVInfo : [ PartyInfo ],
       SuppPubInfo : [
           keyDataLength : uint,
           protected : empty_or_serialized_map,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]
]]></artwork></figure>

<t>The fields in <xref target="cddl-cose-kdf"/> are populated as follows:</t>

<t><list style="symbols">
  <t>PartyUInfo.identity corresponds to the kid found in the
COSE_Sign_Tagged or COSE_Sign1_Tagged structure (when a digital
signature is used). When utilizing a MAC, then the kid is found in
the COSE_Mac_Tagged or COSE_Mac0_Tagged structure.</t>
  <t>PartyVInfo.identity corresponds to the kid used for the respective
recipient from the inner-most recipients array.</t>
  <t>The value in the AlgorithmID field corresponds to the alg parameter
in the unprotected header structure of the recipient structure.</t>
  <t>keyDataLength is set to the number of bits of the desired output value.</t>
  <t>protected refers to the protected structure of the inner-most array.</t>
</list></t>

</section>
</section>
<section anchor="examples" title="Examples">

<section anchor="one-layer-example" title="One Layer">

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
96(
    [
        / algorithm id -100 for HPKE_P256_HKDF256_AES128_GCM /
        << {1: -100} >>, 
        {
            / ephemeral public key structure /
            -1: << {
                1: 2,
                -1: 1,
                -2: h'985E2FDE3E67E1F7146AB305AA98FE89
                      B1CFE545965B6CFB066C0BB19DE7E489',
                -3: h'4AC5E777A7C96CB5D70B8A40E2951562
                      F20C21DB021AAD12E54A8DBE7EF9DF10'
                } >>,
             4: 'kid-2'
        },
        / encrypted plaintext /
        h'4123E7C3CD992723F0FA1CD3A903A588
          42B1161E02D8E7FD842C4DA3B984B9CF'
    ]
)
]]></artwork></figure>

</section>
<section anchor="two-layer-example" title="Two Layer">

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-two"/>. Line breaks and comments have been inserted
for better readability. It uses the following algorithm
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of detached ciphertext in layer 0.</t>
  <t>AES-GCM-128 for encryption of the CEK in layer 1 as well as ECDH
with NIST P-256 and HKDF-SHA256 as a Key Encapsulation Mechanism (KEM).</t>
</list></t>

<t>The algorithm selection is based on the registry of the values offered
by the alg parameters (see <xref target="IANA"/>).</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-two"><artwork><![CDATA[
96_0([
    / protected header with alg=AES-GCM-128 /
    << {1: 1} >>,
    / unprotected header with nonce /
    {5: h'938b528516193cc7123ff037809f4c2a'},
    / detached ciphertext /
    null,
    / recipient structure /
    [
        / algorithm id -100 for HPKE_P256_HKDF256_AES128_GCM /
        << {1: -100} >>, 
        / unprotected header /
        {
            / ephemeral public key structure /
            -1: << {
                1: 2,
                -1: 1,
                -2: h'985E2FDE3E67E1F7146AB305AA98FE89
                      B1CFE545965B6CFB066C0BB19DE7E489',
                -3: h'4AC5E777A7C96CB5D70B8A40E2951562
                      F20C21DB021AAD12E54A8DBE7EF9DF10'
                } >>,
             4: 'kid-2'
        },
        / encrypted CEK /
        h'9aba6fa44e9b2cef9d646614dcda670dbdb31a3b9d37c7a
          65b099a8152533062',
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-two"/>
is signed with a COSE_Sign1 wrapper, which is shown in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> corresponds to the content shown in
<xref target="hpke-example-two"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons" title="Security Considerations">

<t>This specification is based on HPKE and the security considerations of HPKE
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and the it MUST be
ensured that the guidelines for random number generations are followed.</t>

<t>The COSE_Encrypt structure MUST be authenticated using COSE constructs like 
COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0.</t>

<t>When COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>This document requests IANA to add new values to the COSE Algorithms registry
defined in <xref target="RFC8152"/> (in the Standards Action With Expert Review category):</t>

<section anchor="hpkep-256hkdf-256-and-aes-128-gcm" title="HPKE/P-256+HKDF-256 and AES-128-GCM">

<t><list style="symbols">
  <t>Name: HPKE_P256_HKDF256_AES128_GCM</t>
  <t>Value: TBD1</t>
  <t>Description: HPKE/P-256+HKDF-256 and AES-128-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpkep-512hkdf-512-and-aes-256-gcm" title="HPKE/P-512+HKDF-512 and AES-256-GCM">

<t><list style="symbols">
  <t>Name: HPKE_P521_HKDF512_AES256_GCM</t>
  <t>Value: TBD2</t>
  <t>Description: HPKE/P-512+HKDF-512 and AES-256-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

<t>TBD: More values to be added.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180' target='https://www.rfc-editor.org/info/rfc9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Goeran Selander, John Mattsson and Ilari Liusvaara for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
DSMsnsksl+BiuHGL/TfzQZPnnDgAAA==

-->

</rfc>

