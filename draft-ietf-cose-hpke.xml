<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-02" category="std">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="July" day="08"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) encryption function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key. HPKE utilizes a non-interactive ephemeral-static 
Diffie-Hellman exchange to establish a shared secret. The motivation for
standardizing a public key encryption scheme is explained in the introduction
of <xref target="RFC9180"/>.</t>

<t>The HPKE specification defines several features for use with public key encryption
and a subset of those features is applied to COSE <xref target="RFC8152"/>. Since COSE provides
constructs for authentication, those are not re-used from the HPKE specification.
This specification uses the “base” mode, as it is called in HPKE specification
language.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:
- Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.
- Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.
- pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.
- skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>

</section>
<section anchor="hpke-for-cose" title="HPKE for COSE">

<section anchor="overview" title="Overview">

<t>This specification supports two uses of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE in a single sender - single recipient setup.
This use cases uses a one layer structure for efficiency. 
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE in a single sender - multiple recipient setup. 
This use case requires a two layer structure.  <xref target="two-layer"/> 
provides the details.</t>
</list></t>

<t>HPKE in “base” mode requires little information to be exchanged between 
a sender and a recipient, namely</t>

<t><list style="symbols">
  <t>algorithm information,</t>
  <t>the ephemeral public key, and</t>
  <t>an identifier of the static recipient key.</t>
</list></t>

<t>In the subsections below we explain how this information is carried
inside the COSE_Encrypt0 and the COSE_Encrypt1 for the one layer and the
two layer structure, respectively.</t>

<section anchor="one-layer" title="One Layer Structure">

<t>With the one layer structure the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext. The resulting ciphertext
may be included in the COSE_Encrypt0 or may be detached.</t>

<t>A sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>The sender MUST place the kid and ephemeral public key into the unprotected
header.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt0 Structure" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer" title="Two Layer Structure">

<t>With the two layer structure the HPKE information is conveyed in the COSE_recipient structure, i.e. one
COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains content (plaintext)
encrypted with the CEK. This ciphertext may be detached. If not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the algorithm
information and the unprotected header MUST contain the ephemeral public key and the
key id (kid) of the static recipient public key.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.
For example, the content encrypted at layer 0 is a firmware image.  The
same ciphertext firmware image is processed by all of the recipients;
however, each recipient uses their own private key to obtain the CEK.</t>

<t>The COSE_recipient structure shown in <xref target="cddl-hpke"/> is repeated for each
recipient.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
<section anchor="hpke-encryption-with-sealbase" title="HPKE Encryption with SealBase">

<t>The SealBase(pkR, info, aad, pt) function is used to encrypt a plaintext pt to
a recipient’s public key (pkR).</t>

<t>IMPORTANT: For use in COSE_Encrypt, the plaintext “pt” passed into the 
SealBase is the CEK. The CEK is a random byte sequence of length 
appropriate for the encryption algorithm selected in layer 0. For 
example, AES-128-GCM requires a 16 byte key and the CEK would 
therefore be 16 bytes long. In case of COSE_Encrypt0, the plaintext 
“pt” passed into the SealBase is the raw plaintext.</t>

<t>The “info” parameter can be used to influence the generation of keys and the
“aad” parameter provides additional authenticated data to the AEAD algorithm
in use. This specification does not mandate the use of the info and the aad
parameters.</t>

<t>If SealBase() is successful, it will output a ciphertext “ct” and an encapsulated
key “enc”.  The content of enc is the ephemeral public key.</t>

<t>The content of the info parameter is based on the ‘COSE_KDF_Context’ structure,
which is detailed in <xref target="cddl-cose-kdf"/>.</t>

</section>
<section anchor="hpke-decryption-with-openbase" title="HPKE Decryption with OpenBase">

<t>The recipient will use the OpenBase(enc, skR, info, aad, ct) function with the enc and
ct parameters received from the sender. The “aad” and the “info” parameters are obtained
via the context of the usage.</t>

<t>The OpenBase function will, if successful, decrypt “ct”. When decrypted, the result
will be either the CEK (if using COSE_Encrypt), or the raw plaintext (if using 
COSE_Encrypt0). The CEK is the symmetric key used to decrypt the ciphertext in 
layer 0 of the COSE_Encrypt structure.</t>

</section>
<section anchor="info-structure" title="Info Structure">

<t>This section provides a suggestion for constructing the info structure, when used with
SealBase() and OpenBase(). Note that the use of the aad and the info structures for these
two functions is optional. Profiles of this specification may require their use and may
define different info structure.</t>

<t>This specification re-uses the context information structure defined in
<xref target="RFC8152"/> as a foundation for the info structure. This payload becomes the content
of the info parameter for the HPKE functions, when utilized. For better readability of
this specification the COSE_KDF_Context structure is repeated in <xref target="cddl-cose-kdf"/>.</t>

<figure title="COSE_KDF_Context Data Structure for info parameter" anchor="cddl-cose-kdf"><artwork><![CDATA[
   PartyInfo = (
       identity : bstr / nil,
       nonce : bstr / int / nil,
       other : bstr / nil
   )

   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [ PartyInfo ],
       PartyVInfo : [ PartyInfo ],
       SuppPubInfo : [
           keyDataLength : uint,
           protected : empty_or_serialized_map,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]
]]></artwork></figure>

<t>The fields in <xref target="cddl-cose-kdf"/> are populated as follows:</t>

<t><list style="symbols">
  <t>PartyUInfo.identity corresponds to the kid found in the
COSE_Sign_Tagged or COSE_Sign1_Tagged structure (when a digital
signature is used). When utilizing a MAC, then the kid is found in
the COSE_Mac_Tagged or COSE_Mac0_Tagged structure.</t>
  <t>PartyVInfo.identity corresponds to the kid used for the respective
recipient from the inner-most recipients array.</t>
  <t>The value in the AlgorithmID field corresponds to the alg parameter
in the unprotected header structure of the recipient structure.</t>
  <t>keyDataLength is set to the number of bits of the desired output value.</t>
  <t>protected refers to the protected structure of the inner-most array.</t>
</list></t>

</section>
</section>
<section anchor="examples" title="Examples">

<section anchor="one-layer-example" title="One Layer">

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
96(
    [
        / algorithm id TBD1 for COSE_ALG_HPKE_AES_128_GCM /
        << {1: TBD1} >>, 
        {
            / ephemeral public key structure /
            -1: << {
                1: 2,
                                / crv set to COSE_CRV_HPKE_P256_SHA256 /
                -1: TBD4,
                                / x-coordinate /
                -2: h'985E2FDE3E67E1F7146AB305AA98FE89
                      B1CFE545965B6CFB066C0BB19DE7E489',
                                / y-coordinate /
                -3: h'4AC5E777A7C96CB5D70B8A40E2951562
                      F20C21DB021AAD12E54A8DBE7EF9DF10'
                } >>,
             4: 'kid-2'
        },
        / encrypted plaintext /
        h'4123E7C3CD992723F0FA1CD3A903A588
          42B1161E02D8E7FD842C4DA3B984B9CF'
    ]
)
]]></artwork></figure>

</section>
<section anchor="two-layer-example" title="Two Layer">

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-two"/>. Line breaks and comments have been inserted
for better readability. It uses the following algorithm
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of detached ciphertext in layer 0.</t>
  <t>AES-GCM-128 for encryption of the CEK in layer 1 as well as ECDH
with NIST P-256 and HKDF-SHA256 as a Key Encapsulation Mechanism (KEM).</t>
</list></t>

<t>The algorithm selection is based on the registry of the values offered
by the alg parameters (see <xref target="IANA"/>).</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-two"><artwork><![CDATA[
96_0([
    / protected header with COSE_ALG_HPKE_AES_128_GCM /
    << {1: TBD1} >>,
    / unprotected header with nonce /
    {5: h'938b528516193cc7123ff037809f4c2a'},
    / detached ciphertext /
    null,
    / recipient structure /
    [
        / algorithm id TBD4 for COSE_CRV_HPKE_P256_SHA256 /
        << {1: TBD4} >>,
        / unprotected header /
        {
            / ephemeral public key structure /
            -1: << {
                1: 2,
                                / crv set to COSE_CRV_HPKE_P256_SHA256 /
                -1: TBD4,
                                / x-coordinate /
                -2: h'985E2FDE3E67E1F7146AB305AA98FE89
                      B1CFE545965B6CFB066C0BB19DE7E489',
                                / y-coordinate /
                -3: h'4AC5E777A7C96CB5D70B8A40E2951562
                      F20C21DB021AAD12E54A8DBE7EF9DF10'
                } >>,
             4: 'kid-2'
        },
        / encrypted CEK /
        h'9aba6fa44e9b2cef9d646614dcda670dbdb31a3b9d37c7a
          65b099a8152533062',
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-two"/>
is signed with a COSE_Sign1 wrapper, which is shown in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> corresponds to the content shown in
<xref target="hpke-example-two"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons" title="Security Considerations">

<t>This specification is based on HPKE and the security considerations of HPKE
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and the it MUST be
ensured that the guidelines for random number generations are followed.</t>

<t>The COSE_Encrypt structure MUST be authenticated using COSE constructs like 
COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0.</t>

<t>When COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA" title="IANA Considerations">

<t>This document requests IANA to add new values to the COSE Algorithms registry
and to the COSE Elliptic Curves registry, defined in <xref target="RFC8152"/> (in the Standards 
Action With Expert Review category).</t>

<section anchor="cose-algorithms-registry" title="COSE Algorithms Registry">

<section anchor="cosealghpkeaes128gcm" title="COSE_ALG_HPKE_AES_128_GCM">

<t><list style="symbols">
  <t>Name: COSE_ALG_HPKE_AES_128_GCM</t>
  <t>Value: TBD1</t>
  <t>Description: HPKE with AES-128-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosealghpkeaes256gcm" title="COSE_ALG_HPKE_AES_256_GCM">

<t><list style="symbols">
  <t>Name: COSE_ALG_HPKE_AES_256_GCM</t>
  <t>Value: TBD2</t>
  <t>Description: HPKE with AES-256-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosealghpkechacha20poly1305" title="COSE_ALG_HPKE_CHACHA20_POLY1305">

<t><list style="symbols">
  <t>Name: COSE_ALG_HPKE_CHACHA20_POLY1305</t>
  <t>Value: TBD3</t>
  <t>Description: HPKE with CHACHA20-POLY1305</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
</section>
<section anchor="cose-elliptic-curves-registry" title="COSE Elliptic Curves Registry">

<section anchor="cosecrvhpkep256sha256" title="COSE_CRV_HPKE_P256_SHA256">

<t><list style="symbols">
  <t>Name: COSE_CRV_HPKE_P256_SHA256</t>
  <t>Value: TBD4</t>
  <t>Key Type:</t>
  <t>Description: NIST P256 and SHA256 for use with HPKE</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosecrvhpkep384sha384" title="COSE_CRV_HPKE_P384_SHA384">

<t><list style="symbols">
  <t>Name: COSE_CRV_HPKE_P384_SHA384</t>
  <t>Value: TBD5</t>
  <t>Key Type:</t>
  <t>Description: NIST P384 and SHA384 for use with HPKE</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosecrvhpkep521sha512" title="COSE_CRV_HPKE_P521_SHA512">

<t><list style="symbols">
  <t>Name: COSE_CRV_HPKE_P521_SHA512</t>
  <t>Value: TBD6</t>
  <t>Key Type:</t>
  <t>Description: NIST P521 and SHA512 for use with HPKE</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosecrvhpkex25519sha256" title="COSE_CRV_HPKE_X25519_SHA256">

<t><list style="symbols">
  <t>Name: COSE_CRV_HPKE_X25519_SHA256</t>
  <t>Value: TBD7</t>
  <t>Key Type:</t>
  <t>Description: X25519 and SHA256 for use with HPKE</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cosecrvhpkex448sha512" title="COSE_CRV_HPKE_X448_SHA512">

<t><list style="symbols">
  <t>Name: COSE_CRV_HPKE_X448_SHA512</t>
  <t>Value: TBD8</t>
  <t>Key Type:</t>
  <t>Description: X448 and SHA512 for use with HPKE</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180' target='https://www.rfc-editor.org/info/rfc9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Goeran Selander, John Mattsson and Ilari Liusvaara for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
QQAA

-->

</rfc>

