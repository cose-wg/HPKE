<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.24 (Ruby 2.5.1) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2023" month="February" day="23"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms.</t>

<t>This document defines the use of the HPKE base mode with COSE. Other modes are
supported by HPKE but not by this specification.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key. HPKE utilizes a non-interactive ephemeral-static 
Diffie-Hellman exchange to establish a shared secret. The motivation for
standardizing a public key encryption scheme is explained in the introduction
of <xref target="RFC9180"/>.</t>

<t>The HPKE specification defines several features for use with public key encryption
and a subset of those features is applied to COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>). Since COSE provides
constructs for authentication, those are not re-used from the HPKE specification.
This specification uses the "base" mode, as it is called in HPKE specification
language.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:
- Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.
- Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.
- pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.
- skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.
- Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.
- Key Derivation Function (KDF), see <xref target="RFC9180"/>.
- Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two uses of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE in a single recipient setup.
This use cases uses a one layer COSE structure. 
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE in a multiple recipient setup. 
This use case requires a two layer COSE structure.  <xref target="two-layer"/> 
provides the details. While it is possible to support the single 
recipient use case with a two layer structure, the single 
layer setup is more efficient.</t>
</list></t>

<t>HPKE in "base" mode requires little information to be exchanged between 
a sender and a recipient, namely</t>

<t><list style="symbols">
  <t>algorithm information (KEM, KDF, and AEAD identifiers),</t>
  <t>the encapsulated key structure, and</t>
  <t>an identifier of the static recipient key.</t>
</list></t>

<t>In the subsections below we explain how this information is carried
inside the COSE_Encrypt0 and the COSE_Encrypt for the one layer and the
two layer structure, respectively.</t>

<t>In both cases a new structure is used to convey information about the HPKE
sender, namely the HPKE encapsulated key structure (encapsulated_key).</t>

<t>When the alg value is set to 'HPKE-v1-BASE', the encapsulated key MUST be present in 
the unprotected header parameter and its value MUST be of type encapsulated_key.</t>

<t>The CDDL grammar describing the encapsulated_key structure is:</t>

<figure><artwork><![CDATA[
   encapsulated_key = [
       kem_id : uint,         ; kem identifier
       kdf_id : uint,         ; kdf identifier
       aead_id : uint,        ; aead identifier
       enc : bstr,            ; encapsulated key
   ]
]]></artwork></figure>

<figure title="encapsulated_key structure" anchor="_table-hpke-sender"><artwork><![CDATA[
   +---------+----------------+------------+-------------------+
   | Name    | CBOR Type      | Value      | Description       |
   |         |                | Registry   |                   |
   +---------+----------------+------------+-------------------+
   | kem_id  | uint           | HPKE       | Identifier for    |
   |         |                | KEM IDs    | the KEM           |
   |         |                | Registry   |                   |
   |         |                |            |                   |
   | kdf_id  | uint           | HPKE KDF   | Identifier for    |
   |         |                | IDs        | the KDF ID        |
   |         |                |            |                   |
   | aead_id | uint           | HPKE AEAD  | Identifier for    |
   |         |                | IDs        | the AEAD ID       |
   |         |                |            |                   |
   | enc     | bstr           |            | Encapsulated key  |
   |         |                |            | defined by HPKE   |
   +---------+----------------+------------+-------------------+
]]></artwork></figure>

<t>kem_id: This parameter is used to identify the KEM. The registry
       for KEM ids has been established with RFC 9180.</t>

<t>kdf_id: This parameter contains the KDF identifier. 
   The registry containing the KDF ids has been established with RFC 9180.</t>

<t>aead_id: This parameter contains the AEAD identifier. The registry 
   containing the AEAD ids has been established with RFC 9180.</t>

<t>enc: This parameter contains the encapsulated key, which is output
      of the HPKE KEM.</t>

<section anchor="one-layer"><name>Single Recipient / One Layer Structure</name>

<t>With the one layer structure the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext. The resulting ciphertext
may be included in the COSE_Encrypt0 or may be detached.</t>

<t>The sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>The sender MUST place the kid parameter and the encapsulated_key structure
into the unprotected header. The kid identifies the static recipient
public key used by the sender. The recipient uses the kid to determine
the appropriate private key.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt0 Structure" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>Multiple Recipients / Two Layer Structure</name>

<t>With the two layer structure the HPKE information is conveyed in the COSE_recipient 
structure, i.e. one COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext MAY be detached. If not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the HPKE 
alg parameter and the unprotected header MUST contain the encapsulated_key structure
as well as the kid parameter to identify the static recipient public key the sender
has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.
For example, the content encrypted at layer 0 may be a firmware image.  The
same encrypted firmware image may need to be sent to many recipients;
however, each recipient uses their own private key to obtain the CEK.</t>

<t>The COSE_recipient structure, shown in <xref target="cddl-hpke"/>, is repeated for each
recipient.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
<section anchor="hpke-encryption-with-sealbase"><name>HPKE Encryption with SealBase</name>

<t>The SealBase(pkR, info, aad, pt) function is used to encrypt a plaintext pt to
a recipient's public key (pkR).</t>

<t>IMPORTANT: For use in COSE_Encrypt, the plaintext "pt" passed into the 
SealBase is the CEK. The CEK is a random byte sequence of length 
appropriate for the encryption algorithm selected in layer 0. For 
example, AES-128-GCM requires a 16 byte key and the CEK would 
therefore be 16 bytes long. In case of COSE_Encrypt0, the plaintext 
"pt" passed into the SealBase is the raw plaintext.</t>

<t>The "info" parameter can be used to influence the generation of keys and the
"aad" parameter provides additional authenticated data to the AEAD algorithm
in use. This specification does not mandate the use of the info and the aad
parameters. Application-specific profiles of this specification MAY mandate
the use of the info and the aad parameters.</t>

<t>If SealBase() is successful, it will output a ciphertext "ct" and an encapsulated
key "enc".</t>

<t>The content of the info parameter is based on the 'COSE_KDF_Context' structure,
which is detailed in <xref target="cddl-cose-kdf"/>.</t>

</section>
<section anchor="hpke-decryption-with-openbase"><name>HPKE Decryption with OpenBase</name>

<t>The recipient will use the OpenBase(enc, skR, info, aad, ct) function with the enc and
ct parameters received from the sender. The "aad" and the "info" parameters are used 
as mandated by an application-specific profile of this specification.</t>

<t>The OpenBase function will, if successful, decrypt "ct". When decrypted, the result
will be either the CEK (if using COSE_Encrypt), or the raw plaintext (if using 
COSE_Encrypt0). The CEK is the symmetric key used to decrypt the ciphertext in 
layer 0.</t>

</section>
<section anchor="info-structure"><name>Info Structure</name>

<t>This section provides a suggestion for constructing the info structure, when used with
SealBase() and OpenBase(). Note that the use of the aad and the info structures for these
two functions is optional. Profiles of this specification MAY require their use and may
define different info structure.</t>

<t>This specification re-uses the context information structure defined in
<xref target="RFC9053"/> as a foundation for the info structure. This payload becomes the content
of the info parameter for the HPKE functions, when utilized. For better readability of
this specification the COSE_KDF_Context structure is repeated in <xref target="cddl-cose-kdf"/>.</t>

<figure title="COSE_KDF_Context Data Structure for info parameter" anchor="cddl-cose-kdf"><artwork><![CDATA[
   PartyInfo = (
       identity : bstr / nil,
       nonce : bstr / int / nil,
       other : bstr / nil
   )

   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [ PartyInfo ],
       PartyVInfo : [ PartyInfo ],
       SuppPubInfo : [
           keyDataLength : uint,
           protected : empty_or_serialized_map,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<section anchor="one-layer-example"><name>Single Recipient / One Layer Example</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the COSE_Encrypt0 structure using the HPKE scheme is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>It uses the following algorithm combination: 
- KEM: DHKEM(P-256, HKDF-SHA256)
- KDF: HKDF-SHA256
- AEAD: AES-128-GCM</t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
// payload: "This is the content", aad: ""
// 
16([
    h'a10120',  // alg = HPKE-v1-BASE
    {
        4: h'3031', // kid
        -4: [       // encapsulated_key
            16,     // kem = DHKEM(P-256, HKDF-SHA256)
            1,       // kdf = HKDF-SHA256
            1,      // aead = AES-128-GCM
            h'048c6f75e463a773082f3cb0d3a701348a578c67
                 80aba658646682a9af7291dfc277ec93c3d58707
                 818286c1097825457338dc3dcaff367e2951342e
                 9db30dc0e7',  // enc
        ],
    },
    / encrypted plaintext /
    h'ee22206308e478c279b94bb071f3a5fbbac412a6effe34195f7
      c4169d7d8e81666d8be13',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>Multiple Recipients / Two Layer</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the two-layer structure.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-two"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>It uses the following algorithm combination:</t>

<t><list style="symbols">
  <t>At layer 0 AES-128-GCM is used for encryption of the detached plaintext
"This is the content.".</t>
  <t>At the recipient structure at layer 1, DHKEM(P-256, HKDF-SHA256)
(as the KEM), with AES-128-GCM (as the AEAD) and HKDF-SHA256
(as the KDF) is used.</t>
</list></t>

<t>The algorithm selection is based on the registry of the values offered
by the alg parameters (see <xref target="IANA"/>).</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-two"><artwork><![CDATA[
// plaintext: "This is the content.", aad: ""
96_0([
    h'a10101',  // alg = AES-128-GCM (1)
    {5: h'67303696a1cc2b6a64867096'},  // iv
    h'',        // detached ciphertext
    [
        [
            h'a10120',  // alg = HPKE-v1-BASE (-1 #TBD)
            {
                4: h'3031', // kid
                -4: [       // encapsulated_key
                    16,     // kem = DHKEM(P-256, HKDF-SHA256)
                    1,      // kdf = HKDF-SHA256
                    1,      // aead = AES-128-GCM
                    / enc output /
                    h'0421ccd1b00dd958d77e10399c
                         97530fcbb91a1dc71cb3bf41d9
                         9fd39f22918505c973816ecbca
                         6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c',
                ],
            },
            // ciphertext containing encrypted CEK
            h'bb2f1433546c55fb38d6f23f5cd95e1d72eb4
              c129b99a165cd5a28bd75859c10939b7e4d',
        ],

        [
            h'a10120',  // alg = HPKE-v1-BASE (-1 #TBD)
            {
                4: h'313233', // kid
                -4: [       // encapsulated_key
                    16,     // kem = DHKEM(P-256, HKDF-SHA256)
                    1,      // kdf = HKDF-SHA256
                    1,      // aead = AES-128-GCM
                    / enc output /
                       h'6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c
                         9fd39f22918505c973816ecbca
                         6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c',
                ],
            },
            // ciphertext containing encrypted CEK
            h'c4169d7d8e81666d8be13bb2f1433546c55fb
              c129b99a165cd5a28bd75859c10939b7e4d',
        ]        
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-two"/>
is signed with a COSE_Sign1 wrapper, which is shown in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> corresponds to the content shown in
<xref target="hpke-example-two"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of HPKE
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and the it MUST be
ensured that the guidelines for random number generations are followed.</t>

<t>The COSE_Encrypt structure MUST be authenticated using COSE constructs like 
COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0.</t>

<t>When COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Algorithm Parameters' registries in the 'Standards Action 
With Expert Review category.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-v1-BASE</t>
  <t>Value: TBD1 (Assumed: -1)</t>
  <t>Description: HPKE in version 1 in base mode for use with COSE</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-algorithm-parameters"><name>COSE Header Algorithm Parameters</name>

<t><list style="symbols">
  <t>Name: encapsulated_key</t>
  <t>Label: TBD2 (Assumed: -4)</t>
  <t>Value type: encapsulated_key</t>
  <t>Value Registry: N/A</t>
  <t>Description: Encapsulated key for KEM-like algorithms</t>
</list></t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>



<reference anchor='RFC9052'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t><t>This document, along with RFC 9053, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='STD' value='96'/>
<seriesInfo name='RFC' value='9052'/>
<seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>



<reference anchor='RFC9053'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052). </t><t>This document, along with RFC 9052, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='RFC' value='9053'/>
<seriesInfo name='DOI' value='10.17487/RFC9053'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>




    </references>


<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion.</t>

<t><list style="symbols">
  <t>Daisuke Ajitomi</t>
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley for his contributions to
the draft as a co-author of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank John Mattsson, Mike Prorock, Michael Richardson,
Goeran Selander, Laurence Lundblade and Orie Steele for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAK6E92MAA+1cWXPbSJJ+ZwT/Q4UcsZJmSJqHeHZ4Z2hJbmktWV5JPR0d
boeiABQljECAg0MyW6v+7ZuZdQIE5T4cuy+jB5sE6sjKyvzyqmK73W428jCP
xIz9kAmWLNjJ2kvDgH0svCj02+/Fmh3Hfrpe5WESs72Tj++P99ljmN+xw7cX
l+zC+6fwc3YV3sZhfMt4HJSaH15cHe83G9zzUvEwY/iV4RDNRpD4MV/CtEHK
F3k7FPmi7SeZaN+t7kW7O2g2fJ6L2yRdz1iWB81GsxGu0hlbpWI4GE+u0yLL
+93utNuH4VPBZ+xK+EUa5utm4zFJ72/TpFjJGZuNe7GGZ8GMnca5SGORt49w
Vhw0y4HmGx4lMdCyFlmzsQpn7FOe+C2WJWmeikUGn9ZL/PAZe/Aiv0vSWbPB
gHdM/oVxNmMnHXad+XfJQsThrXklV3nC41hkde+T9JbH4S8cGTZj5rFY8jCa
sTvq18lNv7/fLr90YAVIiSWA5n/bYedJymP9UM78NhVxwOPyq/Kk83TJzsJl
mItAN1DTq84d6vx3ni47frLEqZuNOEmX0P9BICfY5bvDfq831Z8nvfGB/jzt
Tbrmc3fYdz4P6DPsbLyojjaZDsZm5NGgq1q2223GvSxPuU8suL4LM5athB8u
Qp+WwwKxCJHXd1KQV1KQQQSY2BBkmJYVIPck0M3GbxbpDkkxqMtCpBnj7IGn
IY9zeADyUzshaBZPvRAIT9ftLPxFAGURD0Eev+QZ0cFZCstYhQLGkWMwGKOD
q6TJUKpVy3jNYB+8MOZm7JhxENKlyFPZD+fmq6yIZJOl8EGUwmzJ9t4fn++3
SCeAVWn4IBssitiXC3x/9G6/RctGSQdqkLFArrMYZBcoQhCE+JVHLOA5Z3vz
4/nRvhmpw+a2P00BpNNKwlgiQYjaliYPYQDDe2t62I5JDFimtNlSnnXMhgN4
FEvkk95rmIf2ETiBH2kWj8ODZRKo3cXBO+wCXqf0FLYtFaD/xWoFai4JkP2K
nMVJjt/zDekiGlAIl2EQRAK/vWIIK2kSFLRs2q/fIHpPT0o3np+BEbD7oOJi
KWBOnjPDl8wRhd8uTrfAQRAIGMaI1K47khLfIg8j6IqTx0ncxt6oV8h+sUJi
Uh61ASBhB2Goo3CxCEX7RETREsRNfMF9uQWCEyagEYyd3eEy7oCvAe5fKnJA
xDvchNyIWZIqzOVpEP5CCrZliYofwBvxhdYGo4Lk4P6GJX4DLxxmKilRQlAP
DZl4wLWxheB5kYqsjAO15IC4o0awrPAykUtBA3Nlh8A9XK2iEKgEjpB870my
APOen1tMfxk8PwN+XIWxL2QzvdVg8pIYoA3WpfS8pD8tNSOwl+QzFW0gOWCL
NFlaqa9Kaw1AQi+pMTuoIjukDaDwsIQcV+HzKJKs3hyw2Yhgzwt+KzpS9A+T
+AFJBMIJMq5FugzjJEpu13ofkI9ofTO2c/7D1fVOS/7PPlzQ58vj//7h9PL4
CD9fnczPzswH3eLq5OKHM3jfbKiPtuvhxfn58Ycj2Ruessqj8/lPOxLLdi4+
Xp9efJif7UghQuwxMIIshU3zSLJECj4GAgJwBHbFT0NPsuPt4cf/iL1s9V3v
QG4mWjzQXvqMFu/5GXwP2DE5YxJHsHD6Csxeo3QInuJAwGDg8irMeZQR47O7
5DFmgEyis8WomT1bJFGUPJLekFMVcst8IH2ZgaFs47bksLC2o064DXuHx+8R
26ml0gZa2uH5lVoSmFrSoXbZEWT1jiBisR2lrIVttrq/xBZItqNTCqMNMrUk
o7eOkjmjkLkSf2gYtQDHJp5XbCLAgqjtdmTN5LuKmazrMi+ZzeOy2WTzLEv8
kF4dWatZNxLqF6kgYoF0ZOHRK3YB4PUQisctoqIsGnDsMZFyg169Y3db5BmC
cOIAfzGvANtArCKHpUBTXqw66HnRPIiQPscRaVgOIi5YxNdCksckdgEadsiP
fXqC9216D1piDBruWiBy8C+lRXcpWBZRHq5qaGAbRECTfxVhSnTgSuvpACLg
pSECR6klhP14F8K0EgFXSZaFXkSYoLhJjRV/cBBLn6GHdtelxZDRqvZW73Fl
ON8yAfwRYF19HNF6fMASB6LtgqMwz5FY7TXDpkv00jYZnBmRPwrwAcBswTwx
OHrSo3P1RUqB3AIeQagFC1iWRkW9aDGQdIloKKkMWAeyDZ5AmoHUYl9cnPU2
YXJUT2fx2JXmiJ3OWn+Ve2H5qX3eU2nqyd76EuM8AdDHHoV2CBjApvTRXKLJ
hKVpiMEMxEUwJQ2EknGjlLEr4bLylPQMH1qxVs0gRq7bVdiLlSB/KTI0ewlI
gVQS8KrEo23PpPCSe+Cj2VyXyOZeUuTGjoOTRLtmdNUY+O2cZnvuuxt4t09U
/QhoRP1hkyFSiQoiBb0YoGQXB20/9Npv51fHu636zSR77SH+igz3KETBIp87
Bm3KgQfQ8E5wFLMVT4HiXDEvBBySU+oxcN/Xq/IkN3LTMcBDj+Hw6OiM3cIw
S7CXygSjxavSdlNefoi2r9n49ddfKYrdaPmGfTLh9b1Y3oBxm7EiRFXQf9/h
C0dKbftgsaV9sKhrz4EZNR2+oxd1HYBaaIyRrR2dOlQ3g3p8Vsu0q/1rW//Z
T3UPNt7iMxrhf9gH2DhGnygQvsZtYvLBP2gP1Zcj2hJp09QzNYL+s5/Mg0tx
G8Lq1nVvzQjfYhVqa+ETsr5EAymQ/nJqsQgV/7etAgCRnR5l8gvKIz6oruLP
8+HFEbZ9qYygRHYrHwDW2R/mg+KB/EJ8gNFOj779KrQibVsF2aRvtgoazSzj
260CtVu2QQ3fPsJxFXl/Nw3aA9bZjG+kWQQzTzP2CgN9laRVfgWlj9/sbAfm
nWdKVirFnEk3zpoJxywqXFxrzZLpg1RpjMFK3GDUuxBiyjuOfgEYOJODgKHI
FQNXmqEv3ZGzK33YmB5MMbiAcWak2IKz9DpLNOjm2hzJDr+HDCXQL9NR8bTK
fJBUVQhRPX4PJbBjL1NRNT0tCGdD/w53DHyVVZGbdLKTdsNtk4HKK0xyoMt7
aZy71+wCfKszcqSujOF+emUDBXJYkNqyI2atvMz/WL9J+XrMcfWaDXLrnBjC
9cHEEuL5oNyj5Bx2mPXArWwG4Hr7eWRyQjIg1Tk3vUMZBjCwJTAzhPP4ptlY
8rVMLfhREdgkVtkhBZFW7TAk8WHTTCJL6Rk5UOS1KVfOUaFYhcdlX0ztF7rB
AUWjpUQpLlAutToJrMqXfLnHLGbJoXvZB8OpgFf1rqHkEQ5pJDurjQF0Dp0Q
kPjvSUiQRGpeOxFYZqjFnUJil4CC0kflKyBklWLI7SYQiL1PT34QRBLO3GAV
EzJZzS6RZ2rDS+OAlVrdXPNbjMHesFejTm+0V3q5j32+UyrQrfS0LuoJcSxr
yW9WmpSPCIoUhxG8/exAc81SNDgT3Tr/3saYMqis7KqM1tcbSz+f/4TSmcu1
Yb40lp+JC3NMCPMlhu6hzmdREsaQ0lbvdWoD4OFcR/sGIDJY2DWEWpsIYaP4
EkLUxGUWiqpRIQVdFQW0YoR5aRPahR3RIfjZiiQrmNM8txGrTAOnCahwJV9H
ZFLVAQh4SKIHEcxI/dpaGtien6QYVCagr4jryWaMagjYL2O1LzN+bM9AEkia
giptAGiw4/cdCfqOUKm9NcjDTheUYtYPKCyMQbkpPfISkFWUQy+tV7M0t95V
tyqDOxnE0QLnQwFWwAz9b0UsUlTmSs3BILYL1HbZUlqkLGTKXFg+QTu9LHiI
35xk0nUNxkrEVERb0Ws2ygitobMmYN4Y4CV4BeP+KKIIc52b+Fz1oDZyKw6s
WjhtNozLUGCOSsoKWQeTYTTaV5/O0JzWQkg1LB9rklFGiSm1QbJuaJJ8QHmO
NoDLPRJfViKWtsnkIp0ao1v9WuHOywLHPKN1Yr7eSx50rm0zec5pbytioQkG
CuTy0Dl6B2KmwKpVamXFxLbXVpuzRZguH0m7l1gfIb8RMAVjatux3Ig6o3Cr
/B0lV+DjEiu8Ztuy72CLkkesWbWYQGDZtH1hyhBy3QQ5jJN4RqhQAUrAXqN8
LRe4jTXB2hXsdSpWgtiMWohUOMXFekNYsoPTsh0EcAIdeW2Q73W5qzaErhnc
bgSddGwG7/5aWSBZSTtZz0xmWaCms7rJ9Bwd34P1SlW9WfIVTedq8az6UuEG
/amMjqLANoQJn7Dt94hhoX/jrvMvIFqeiNib/5SZM3z6XGfmf6tx/5ptf8G0
sxdtu0GFDdsuQbBa+rgSPHoL5Gki9Pe91f1li6x1i3EO1gbkwx5IqMEZbh1v
hpqcYJq7vtTNcHCZBz09/3hxeT3/cD1j71S9V1VENCdaZaee7azyHUCpLCNj
p8xxs6Hp1mUpZVyEtB4INSngfbIEtzVHpf5XIbDYC7gWifiWTpq4TqlOOzsA
Z9PxmYiknAGpGqKIfLBaGqPmx1ftXn/S/v7w3K2K9EaSAOSCyXcDhY9JEQUy
gZuKBdYeYPNVY7CPSXwLDkAsixpAc8kNrHKo2ajlUZVDKX90YiW9/zu45Ttu
9AkmwxM2HRAvIsk6HEPZe3X64R6tt0nP74DYuAOZGo9jP8qnWejEiqKWYmfD
coxhkATlL1ROECQwKLpGSzzCkIvqyRNckWE2EAWhjHFjOmyOBwTkSG09LtK6
CCNZpts8cELKqSZTOfftszk+k5T4hdUxKtZmhe+LLFsUUQtrXY8huBIylAd5
cQB2x4dNpYJRXHJH5LEhzPXsmF3U1tGlqZTdkYiUSDu0S+L0/ujdDdWov+S7
jv3B8rlKMMjCnC7lEubR8cD7YFFBmSNRRpkL8CJclLEoT8tF9iEhuhkWTVpY
ZC4hkO8ikHGeMY0HXGk2/Nx1T2EGET64RzHcQFXKpt6lqszLgIAknrw7tdUU
8qID9YLE1AuM2Re9QHcdEe77oiQGgWQfbTmWQUWsHym/X2U1YG+QfVhlDBE5
DJzswYDScSwZ+BZTsFbSfad1JfbdL0EoMbF0ns3kYYTjvlmJpZKU9eFIPE5R
FK+s86zL5bKe6IAEMATMXWZOqZlzODq7RkLt+El4rENSJF1aR8two41swaI+
JLk61FVRXtRXLRXl8TNtEjJVedQ7SKeMkpUEtA77+HXkUOZAuYg4O04Jbmez
ITPFLAjxEKOs6rlEbDuJIo8dOUHnl7wUaNsAwR7GwESLOfyEsQt4y0mBgq45
vsmEjk5NrqOEY0HbT5aiFOvSya8ayNHjybMTmnV60+SZt0AaUU/kOcXxPOAe
vMjXdISzhpkm0HWgqxwMGQd5K2LpWt1HiHvWJJxv2J49Q0yhG1Cw4d3SX5yg
ITTvQsqmllokpJZub3q1r9K9G9S79dC5tn6nRzCCHDyXrqtqQUT/QFTP2Cdn
DZ8rbf7xcpurYrX6WHi6kXmOf6DneCbmTHpJqnZaauH63WK5ytc3SXqTgQ/N
aVeNE27+/lZii3nlEPQ3SRJEToom03Ajuab303jeVZbSiR6btkJJLAun9MBf
sWPpu2UKqV5MlKu2bprcONxGSbWHDo5YIfWEo01Xad1HjqERHTxYLouYfCCG
x8FtZKoVjTIzGyeBVBS5TLLcnlSBYdfV7J9SyXLu0OqJhH6jneaMJwTKNq6g
HKYaEHOZoD7sDLHKA0W9l24fLoTivTv+IGT2IowzNAZgnhe1qi2jmdO89jCd
cbidg9WYnmtjQWPGjk7gv72P7f5w1GInsOXtq5M5fNmnFkfvZu5DOgQGPuWs
5JkbBHj9WjN7xnZo88ISru2QDwLvdqhts9Eb7Sk9udvlvW6v391tMQavMMf0
hrknOGSzJ6sCBxCf7g66gx50gR73YWDftQ9QS+UfvKvmnUp6BAFCSzfEMxJv
XmJJqV/LzoCq86bMqbqmuDI8JvHG5V+56d1u92DijxbjoTgYDfh4POhO+ouB
73UD+NbtDQ4mfDiGFuNyP/qbdLnHR8PJ6GA0mvT5lC/G/WkvWPj98Vj404E/
CIaTcbe2a2/Sn4z8Xnc6nvSHB8PxYDAJoL3PF4vBaCz60yHM3Rc1XaeBN+gG
fleM1e4Bv20zDUjP6v/XTtLIek+vtRgI0e/3uyNYtTiAZfbHU2964HndcW8x
4MOF53H/oNfnI9BVMTjoTYcLsxp4MZoG42AiJr3RaBRMPNEb7GKOYt/Bu6oO
liDPKLaGJp19UPD29dS+k9AvYZnOoWs4edSItg3Qcgi1syXEMhxDLQNh6DU5
SSELOzWZTIAw66TVnAAU6KTBeBIUVW81V9aiVG9+lxS3dyakAicZsD2rnOl7
GSX/FEgCef+fIEmAZ1OiLurp7A1lDUv3F3BsXWCwIo5SWgeKnZ2OmiUvxXSW
ayYnCzDyIjbtqeS5PPQrD+U6FOvX8jYLsrECWKb/0bt9vT4TdVUzNyqDVYqB
TSFfcUGm+eRtItwZVe0sVRAytidPCJ/OP8zxBkHJnGju1RuUjmtRpqObbtmc
dHslc1LiRU+h+dMQ7cgIYHYwmo54z/f73oiPDiajcXc62n2WA4QPetxdc4oN
Hptddqvi+M7x/j5V8f0rho7ttXvs1fXbo4q5edpE3pdMoP77XaZQ//1Rk2j6
W3v3FctY0+NrFlL/0WJ0kud1fRu0pn3Y06DndbtBMB1OArCEve5gOvXre9Df
dDwcdBe+5017vBf4457vDbzFQS+YvtRpEQymiz4Y3MmwO/Sn4wGYIeF7Pn+h
0ygQw+7YP+iOBwF08gFYxwMBtn74QqfFqCv6A2w35dODwcATUzEdiuHA321t
dvtcefZc+Q4sd9INzumbUvGwKsWe11/0YO7hwcgfgl0Gb2G06A8WQx+4LHrB
uC+8gyoxfq8P5nzKeyNoNuT9iReMh5PhFN2OwdQbi4PAXQFS/n+oSL1BfzD4
typtUSWGLP/G4vpvbaK/u91a17WqYn9Wm/QH+ejzi44xuoU1jvEWv/g6kTa+
crHPXIVQ5ymxwKI82S2eXrOB+anwNtYnO7h0JfHOco89pnjVLHVO621zG3EI
yk1dvzinbMbsCY5MV0507l9PgIm+GsfU+Cq9CeW7PukYx6ZzXmukGu3C5wr4
/Ey49TPrzdpj+O/48OhqzkCz2c9uu2foaKInt0RbGY9wC/49mO1Klv9dUYuX
23dtSxuKada8VnI4n/emnU7n7aR7uGsaIZfoLig1u9s9HrydQKP+8O2EBv3c
bGyVI+z7OwQJM0j65w7wrh+eY0zVRcCnV5nw25jBft6SwXXdUQowdBba3Ln2
y0Oqw4I6iyvvLHOZVVYVRFWnwJCJznyQfNSWJuSMJktlxJ4OFlHgBZGToxUv
3ByUtRgakO59Lfm9HhNPXdAkFG5kHXaCdUT8SYclMXOJgzlDB+iQh14hL7na
2/JYzSVaZf35CzSzq0hFhMdXEro7lxSprPHK2m+M8Z881cEfeBgRa5T/H4iH
0BcdNjfFyWiNceTj1061qeKInCFamyNQTiEh1xdtMLeXFXjqxhQfbgvY1Ihu
QKM8qSJ1XCw9mMmWV2VJSoZ9+gzAxpkBS5i+2FOur9qKkK2m4M21e3M8F8Gq
5eCW+nw+P6TSkf7StXeYSgToJiYXoSNNBYg1QQedYpMFY7pWhnV5PNGr721j
DHVLCqCwA8XwIXTAdRu9zYZLsa0S+8kDIboqaFbo6bBTVG4M0THAI0bKTcMS
hNq0unWQiuFxqTREsc5qKVcFlDBryVv35SNNdGMR2cFjWf+Ww7unLVZ0x15s
owLi1CKXJ5jw1xJQvCBYBUJk8RJ/UcAZOOvo30qA+HUTsyiq3fx9ByxfiQwE
h3phajoI6FadCpmVGaKisq1hZLtSHxJ1S02+lmdsbCssT6jYeleH5CHxUo55
pX6lIGNzKQnq2Okx8j1nlwLv4DL9KzW65lihxFz3kUkSumI1q2Rs4TFdr5ox
8MJ7bG8uAWfG2j1KL7v3rWbmsiwIFsFkD7/Y37oo/ZKBvDQMIxzylczvwALB
O7/P15/lc/kTDli+SEHfRTpjp8dX39O7S0F1QR/oYp8+AWnqsgCYgM+fVQuZ
YAqQ2J9MMeNr3C6xYjM8gFdneACK2NF32XGwb5lFlwi3dJcNNOdn7MPr+SYf
N67aqFslbcIok8bJ9A9+eNy/N795IG1FItfyo1BHaqgnKG58X0mc4fn7hzAo
QG91dTKUdy20zYGBlCwHgpwBMCTyokIpFahiD3POpnzdmWFSzyTr6CQPKUJE
N1QZ/qQPHUQGtqDB8wsytB2VwDviYVbAAub/DPNkGeKjS/AfQQPYW57GuL1t
dhrxNGRnYZE9cNhQ7PkuVAbsscyHRLHiEqZhJ0mRRYrJd/Istl07HeCiteOv
Msn6sJ+05Q8tIScgNMhDHmmZ11gy9+/j5DESwS1haN1maCL+K7mL2TnP8yzD
X9I4x5cf0yRN/Hv8BssUkV4utmg2vk8AnmJwsyIuL+Ke8YLUgZ0VceBFIN6y
1g+gwa4A9SLh7G0q0WEBYIiCAwT/L0OnsuxrSwAA

-->

</rfc>

