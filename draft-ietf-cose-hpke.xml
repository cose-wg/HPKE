<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-01" category="std">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="February" day="23"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) encryption function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Hybrid public-key encryption (HPKE) <xref target="I-D.irtf-cfrg-hpke"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key. HPKE utilizes a non-interactive ephemeral-static 
Diffie-Hellman exchange to establish a shared secret. The motivation for
standardizing a public key encryption scheme is explained in the introduction
of <xref target="I-D.irtf-cfrg-hpke"/>.</t>

<t>The HPKE specification defines several features for use with public key encryption
and a subset of those features is applied to COSE <xref target="RFC8152"/>. Since COSE provides
constructs for authentication, those are not re-used from the HPKE specification.
This specification uses the “base” mode, as it is called in HPKE specification
language.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:
- Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.
- Hybrid Public Key Encryption (HPKE) is defined in <xref target="I-D.irtf-cfrg-hpke"/>.
- pkR is the public key of the recipient, as defined in <xref target="I-D.irtf-cfrg-hpke"/>.
- skR is the private key of the recipient, as defined in <xref target="I-D.irtf-cfrg-hpke"/>.</t>

</section>
<section anchor="hpke-for-cose" title="HPKE for COSE">

<section anchor="overview" title="Overview">

<t>The CDDL for the COSE_Encrypt structure, as used with this specification,
is shown in <xref target="cddl-hpke"/>.</t>

<t>HPKE, when used with COSE, follows a two layer structure:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains content (plaintext)
encrypted with the CEK. This ciphertext may be detached. If not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer includes the 
encrypted CEK.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<t>For example, the content to be encrypted at layer 0 may be a firmware image.
Then, a single firmware image can be encrypted with the same CEK once while
each recipient receives the CEK encrypted differently.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
HPKE_Encryption_Info = COSE_Encrypt_Tagged

; Layer 0
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

; Layer 1   
COSE_recipient = [
  protected   : bstr .cbor header_map, ; must contain alg parameter
  unprotected : header_map, ; must contain kid and ephemeral public key
  encCEK      : bstr, ; CEK encrypted with HPKE-derived shared secret
]

header_map = {
  Generic_Headers,
  * label =values,
}
]]></artwork></figure>

<t>The COSE_recipient structure shown in <xref target="cddl-hpke"/> includes the
encrypted CEK as well as the ephemeral public key (in the unprotected header 
structure).</t>

</section>
<section anchor="hpke-encryption-with-sealbase" title="HPKE Encryption with SealBase">

<t>The SealBase(pkR, info, aad, pt) function is used to encrypt a plaintext pt to
a recipient’s public key (pkR).</t>

<t>IMPORTANT: For use in this specification, the plaintext “pt” passed into the
SealBase is the CEK. The CEK is a random byte sequence of length appropriate
for the encryption algorithm selected in layer 0. For example, AES-128-GCM
requires a 16 byte key and the CEK would therefore be 16 bytes long.</t>

<t>The “info” parameter can be used to influence the generation of keys and the
“aad” parameter provides additional authenticated data to the AEAD algorithm
in use. If successful, SealBase() will output a ciphertext “ct” and an encapsulated
key “enc”.  The content of enc is the ephemeral public key.</t>

<t>The content of the info parameter is based on the ‘COSE_KDF_Context’ structure,
which is detailed in <xref target="cddl-cose-kdf"/>.</t>

</section>
<section anchor="hpke-decryption-with-openbase" title="HPKE Decryption with OpenBase">

<t>The recipient will use the OpenBase(enc, skR, info, aad, ct) function with the enc and
ct parameters received from the sender. The “aad” and the “info” parameters are obtained
via the context of the usage.</t>

<t>The OpenBase function will, if successful, decrypt “ct”. When decrypted, the result
will be the CEK. The CK is the symmetric key used to decrypt the ciphertext in layer 0
of the COSE_Encrypt structure.</t>

</section>
<section anchor="info-structure" title="Info Structure">

<t>This specification re-uses the context information structure defined in
<xref target="RFC8152"/> for use with the HPKE algorithm. This payload becomes the content
of the info parameter for the HPKE functions. For better readability of this specification
the COSE_KDF_Context structure is repeated in <xref target="cddl-cose-kdf"/>.</t>

<figure title="COSE_KDF_Context Data Structure for info parameter" anchor="cddl-cose-kdf"><artwork><![CDATA[
   PartyInfo = (
       identity : bstr / nil,
       nonce : bstr / int / nil,
       other : bstr / nil
   )

   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [ PartyInfo ],
       PartyVInfo : [ PartyInfo ],
       SuppPubInfo : [
           keyDataLength : uint,
           protected : empty_or_serialized_map,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]
]]></artwork></figure>

<t>Since this specification may be used in a number of different deployment environments
flexibility for populating the fields in the COSE_KDF_Context structure is provided.</t>

<t>For better interoperability, the following recommended settings
are provided:</t>

<t><list style="symbols">
  <t>PartyUInfo.identity corresponds to the kid found in the
COSE_Sign_Tagged or COSE_Sign1_Tagged structure (when a digital
signature is used). When utilizing a MAC, then the kid is found in
the COSE_Mac_Tagged or COSE_Mac0_Tagged structure.</t>
  <t>PartyVInfo.identity corresponds to the kid used for the respective
recipient from the inner-most recipients array.</t>
  <t>The value in the AlgorithmID field corresponds to the alg parameter
in the unprotected header structure of the recipient structure.</t>
  <t>keyDataLength is set to the number of bits of the desired output value.</t>
  <t>protected refers to the protected structure of the inner-most array.</t>
</list></t>

</section>
</section>
<section anchor="example" title="Example">

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example"/>. It uses the following algorithm
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of detached ciphertext in layer 0.</t>
  <t>AES-GCM-128 for encryption of the CEK in layer 1 as well as NIST P-256 
and HKDF-SHA256 as a Key Encapsulation Mechanism (KEM).</t>
</list></t>

<t>The algorithm selection is based on the registry of the values offered
by the alg parameters.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96_0([
    / protected header with alg=AES-GCM-128 /
    h'a10101',
    / unprotected header with nonce /
    {5: h'938b528516193cc7123ff037809f4c2a'},
    / detached ciphertext /
    null,
    / recipient structure /
    [
        / protected field with alg for HPKE /
        h'a1013863',
        / unprotected header /
        {
            / ephemeral public key with x / y coodinate /
            -1: h'a401022001215820a596f2ca8d159c04942308ca90
                  cfbfca65b108ca127df8fe191a063d00d7c5172258
                  20aef47a45d6d6c572e7bd1b9f3e69b50ad3875c68
                  f6da0caaa90c675df4162c39',
             /  kid for recipient static ECDH public key /
             4: h'6b69642d32',
        },
        / encrypted CEK /
        h'9aba6fa44e9b2cef9d646614dcda670dbdb31a3b9d37c7a65b099a8152533062',
    ],
])
]]></artwork></figure>

<t>Note that the COSE_Sign1 wrapper outside the COSE_Encrypt structure is not shown
in the example above.</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>This specification is based on HPKE and the security considerations of HPKE
<xref target="I-D.irtf-cfrg-hpke"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Some form of public key distribution
mechanism is assumed to exist.</t>

<t>Since the CEK is randomly generated it must be ensured that the guidelines for
random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>The COSE_Encrypt structure must be authenticated using COSE constructs like 
COSE_Sign, or COSE_Sign1.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requests IANA to add new values to the COSE Algorithms registry
defined in <xref target="RFC8152"/> (in the Standards Action With Expert Review category):</t>

<section anchor="hpkep-256hkdf-256-and-aes-128-gcm" title="HPKE/P-256+HKDF-256 and AES-128-GCM">

<t><list style="symbols">
  <t>Name: HPKE_P256_HKDF256_AES128_GCM</t>
  <t>Value: TBD1</t>
  <t>Description: HPKE/P-256+HKDF-256 and AES-128-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpkep-512hkdf-512-and-aes-256-gcm" title="HPKE/P-512+HKDF-512 and AES-256-GCM">

<t><list style="symbols">
  <t>Name: HPKE_P521_HKDF512_AES256_GCM</t>
  <t>Value: TBD2</t>
  <t>Description: HPKE/P-512+HKDF-512 and AES-256-GCM</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

<t>TBD: More values to be added.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>


<reference anchor='I-D.irtf-cfrg-hpke'>
   <front>
      <title>Hybrid Public Key Encryption</title>
      <author fullname='Richard L. Barnes'>
	 <organization>Cisco</organization>
      </author>
      <author fullname='Karthik Bhargavan'>
	 <organization>Inria</organization>
      </author>
      <author fullname='Benjamin Lipp'>
	 <organization>Inria</organization>
      </author>
      <author fullname='Christopher A. Wood'>
	 <organization>Cloudflare</organization>
      </author>
      <date day='2' month='September' year='2021'/>
      <abstract>
	 <t>   This document describes a scheme for hybrid public-key encryption
   (HPKE).  This scheme provides a variant of public-key encryption of
   arbitrary-sized plaintexts for a recipient public key.  It also
   includes three authenticated variants, including one which
   authenticates possession of a pre-shared key, and two optional ones
   which authenticate possession of a KEM private key.  HPKE works for
   any combination of an asymmetric key encapsulation mechanism (KEM),
   key derivation function (KDF), and authenticated encryption with
   additional data (AEAD) encryption function.  Some authenticated
   variants may not be supported by all KEMs.  We provide instantiations
   of the scheme using widely used and efficient primitives, such as
   Elliptic Curve Diffie-Hellman key agreement, HKDF, and SHA2.

   This document is a product of the Crypto Forum Research Group (CFRG)
   in the IRTF.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-irtf-cfrg-hpke-12'/>
   <format target='https://www.ietf.org/archive/id/draft-irtf-cfrg-hpke-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Goeran Selander, John Mattsson and Ilari Liusvaara for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

