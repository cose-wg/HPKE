<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.24 (Ruby 2.5.1) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2023" month="March" day="13"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms.</t>

<t>This document defines the use of the HPKE base mode with COSE. Other modes are
supported by HPKE but not by this specification.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key. HPKE utilizes a non-interactive ephemeral-static 
Diffie-Hellman exchange to establish a shared secret. The motivation for
standardizing a public key encryption scheme is explained in the introduction
of <xref target="RFC9180"/>.</t>

<t>The HPKE specification defines several features for use with public key encryption
and a subset of those features is applied to COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>). Since COSE provides
constructs for authentication, those are not re-used from the HPKE specification.
This specification uses the "base" mode, as it is called in HPKE specification
language.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:
- Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.
- Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.
- pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.
- skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.
- Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.
- Key Derivation Function (KDF), see <xref target="RFC9180"/>.
- Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.
- Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two uses of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE in a single recipient setup.
This use cases uses a one layer COSE structure. 
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE in a multiple recipient setup. 
This use case requires a two layer COSE structure.  <xref target="two-layer"/> 
provides the details. While it is possible to support the single 
recipient use case with a two layer structure, the single 
layer setup is more efficient.</t>
</list></t>

<t>HPKE in Base mode requires little information to be provided by
the sender, namely</t>

<t><list style="symbols">
  <t>algorithm information (KEM, KDF, and AEAD identifiers),</t>
  <t>an encapsulated key generated by the sender, and</t>
  <t>an identifier of the static recipient key.</t>
</list></t>

<t>In the subsections below we explain how this information is carried
inside the COSE_Encrypt0 and the COSE_Encrypt for the one layer and the
two layer structure, respectively.</t>

<t>In both cases a new structure is used to convey information about the HPKE
sender, namely the HPKE sender information structure (sender_info).</t>

<t>When the alg value is set to 'HPKE-v1-BASE', the sender_info structure MUST
be present in the unprotected header parameter.</t>

<t>The CDDL grammar describing the sender_info structure is:</t>

<figure><artwork><![CDATA[
   sender_info = [
       kem_id : uint,         ; kem identifier
       kdf_id : uint,         ; kdf identifier
       aead_id : uint,        ; aead identifier
       enc : bstr,            ; encapsulated key
   ]
]]></artwork></figure>

<t>The fields have the following meaning:</t>

<figure title="sender_info structure" anchor="_table-hpke-sender"><artwork><![CDATA[
   +---------+----------------+------------+-------------------+
   | Name    | CBOR Type      | Value      | Description       |
   |         |                | Registry   |                   |
   +---------+----------------+------------+-------------------+
   | kem_id  | uint           | HPKE       | Identifier for    |
   |         |                | KEM IDs    | the KEM           |
   |         |                | Registry   |                   |
   |         |                |            |                   |
   | kdf_id  | uint           | HPKE KDF   | Identifier for    |
   |         |                | IDs        | the KDF ID        |
   |         |                |            |                   |
   | aead_id | uint           | HPKE AEAD  | Identifier for    |
   |         |                | IDs        | the AEAD ID       |
   |         |                |            |                   |
   | enc     | bstr           |            | Encapsulated key  |
   |         |                |            | defined by HPKE   |
   +---------+----------------+------------+-------------------+
]]></artwork></figure>

<t>kem_id: This parameter is used to identify the KEM. The registry
          for KEM ids has been established with RFC 9180.</t>

<t>kdf_id: This parameter contains the KDF identifier.
          The registry containing the KDF ids has been established
          with RFC 9180.</t>

<t>aead_id: This parameter contains the AEAD identifier. The registry
           containing the AEAD ids has been established with RFC 9180.</t>

<t>enc: This parameter contains the encapsulated key, which is output
       of the HPKE KEM.</t>

<section anchor="one-layer"><name>Single Recipient / One Layer Structure</name>

<t>With the one layer structure the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext. The resulting ciphertext
may be included in the COSE_Encrypt0 or may be detached. If a payload is
transported separately then it is called "detached content". A nil CBOR
object is placed in the location of the ciphertext. See Section 5
of <xref target="RFC9052"/> for a description of detached payloads.</t>

<t>The sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>The sender MUST place the kid parameter and the sender_info structure
into the unprotected header. The kid identifies the static recipient
public key used by the sender. The recipient uses the kid to determine
the appropriate private key.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt0 Structure" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>Multiple Recipients / Two Layer Structure</name>

<t>With the two layer structure the HPKE information is conveyed in the COSE_recipient 
structure, i.e. one COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext MAY be detached. If not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the HPKE 
alg parameter and the unprotected header MUST contain the sender_info structure
as well as the kid parameter to identify the static recipient public key the sender
has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.
For example, the content encrypted at layer 0 may be a firmware image.  The
same encrypted firmware image may need to be sent to many recipients;
however, each recipient uses their own private key to obtain the CEK.</t>

<t>The COSE_recipient structure, shown in <xref target="cddl-hpke"/>, is repeated for each
recipient.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="hpke-encryption-and-decryption"><name>HPKE Encryption and Decryption</name>

<section anchor="hpke-encryption-with-sealbase"><name>HPKE Encryption with SealBase</name>

<t>The SealBase(pkR, info, aad, pt) function is used to encrypt a plaintext pt to
a recipient's public key (pkR).</t>

<t>Two cases of plaintext need to be distinguished:</t>

<t><list style="symbols">
  <t>For use in COSE_Encrypt, the plaintext "pt" passed into<br />
SealBase is the CEK. The CEK is a random byte sequence of length 
appropriate for the encryption algorithm selected in layer 0. For 
example, AES-128-GCM requires a 16 byte key and the CEK would 
therefore be 16 bytes long.</t>
  <t>In case of COSE_Encrypt0, the plaintext "pt" passed into 
SealBase is the content to be encrypted. Hence, there is no 
intermediate layer utilizing a CEK.</t>
</list></t>

<t>The "aad" and the "info" parameters are described in <xref target="aad"/> and <xref target="info"/>, 
respectively.</t>

<t>If SealBase() is successful, it will output a ciphertext "ct" and an encapsulated
key "enc".</t>

</section>
<section anchor="hpke-decryption-with-openbase"><name>HPKE Decryption with OpenBase</name>

<t>The recipient will use the OpenBase(enc, skR, info, aad, ct) function with the "enc" and
the "ct" parameters received from the sender. The "aad" and the "info" parameters are
assumed to be constructed from the context and described
in <xref target="aad"/> and <xref target="info"/>, respectively.</t>

<t>The OpenBase function will, if successful, decrypt "ct". When decrypted, the result
will be either the CEK (when COSE_Encrypt is used), or the content (if 
COSE_Encrypt0 is used). The CEK is the symmetric key used to decrypt the ciphertext at 
layer 0.</t>

</section>
<section anchor="aad"><name>AAD Parameter</name>

<t>HPKE requires an "aad" parameter to be provided to the SealBase and OpenBase functions.
Note that there are three types of additional authenticated data used by this specification:</t>

<t><list style="symbols">
  <t>AAD provided to HPKE for COSE_Encrypt0.</t>
  <t>AAD provided to HPKE for COSE_Encrypt at the recipient layer.</t>
  <t>AAD provided to the AEAD cipher used for content encryption at layer 0 by COSE_Encrypt.</t>
</list></t>

<t>We describe the three variants in the subsections below.</t>

<section anchor="aad-provided-to-hpke-for-coseencrypt0"><name>AAD provided to HPKE for COSE_Encrypt0</name>

<t>When COSE_Encrypt0 is used then there is no separate AEAD function at the content 
encryption layer provided by COSE natively and HPKE offers this functionality.</t>

<t>The "aad" parameter of provided to the SealBase and OpenBase functions is constructed
as follows (again intentionally aligned with COSE by re-using the Enc_structure):</t>

<figure><artwork><![CDATA[
Enc_structure = [
    context : "Encrypt0",
    protected : empty_or_serialized_map,
    external_aad : bstr
]
]]></artwork></figure>

<t>The protected field in the Enc_structure contains the protected attributes 
from the COSE_Encrypt0 structure at layer 0, encoded in a bstr type.</t>

<t>The external_aad field in the Enc_structure is populated with the API caller
provided AAD information. If this field is not supplied, it defaults to a 
zero-length byte string.</t>

</section>
<section anchor="aad-provided-to-hpke-for-coseencrypt-at-the-recipient-layer"><name>AAD provided to HPKE for COSE_Encrypt at the Recipient Layer</name>

<t>The AAD used at the recipient layer re-uses Enc_structure 
from <xref target="RFC9052"/> and populates it with the following content:</t>

<figure><artwork><![CDATA[
Enc_structure = [
    context : "Enc_Recipient",
    protected : empty_or_serialized_map,
    external_aad : bstr
]
]]></artwork></figure>

<t>The protected field in the Enc_structure contains the protected attributes 
from the COSE_recipient structure at layer 1, encoded in a bstr type.</t>

<t>The external_aad field in the Enc_structure is populated with the API caller
provided AAD information. In the COSE_Encrypt case this AAD information is also
input to the AAD at layer 0, if an AEAD cipher is used at layer 0. If this field 
is not supplied, it defaults to a zero-length byte string.</t>

</section>
<section anchor="aad-provided-to-the-aead-cipher-used-for-content-encryption-at-layer-0-by-coseencrypt"><name>AAD provided to the AEAD cipher used for Content Encryption at Layer 0 by COSE_Encrypt</name>

<t>The construction of AAD is defined in Section 5.3 of <xref target="RFC9052"/> (see Enc_structure
structure).</t>

</section>
</section>
<section anchor="info"><name>Info Parameter</name>

<t>The HPKE specification defines the "info" parameter as a context information
structure that is used to ensure that the derived keying material is "bound" to
the context of the transaction.</t>

<t>This section provides a suggestion for constructing the info structure, when used with
SealBase() and OpenBase(). HPKE leaves the info parameter for these two functions as
optional. Application profiles of this specification MAY populate the fields of the 
COSE_KDF_Context structure or MAY use a different structure as input to the "info"
parameter. If no content for the "info" parameter is not supplied, it defaults to 
a zero-length byte string.</t>

<t>This specification re-uses the context information structure defined in
<xref target="RFC9053"/> as a foundation for the info structure. This payload becomes the content
of the info parameter for the HPKE functions, when utilized. For better readability of
this specification the COSE_KDF_Context structure is repeated in <xref target="cddl-cose-kdf"/>.</t>

<figure title="COSE_KDF_Context Data Structure as 'info' Parameter for HPKE" anchor="cddl-cose-kdf"><artwork><![CDATA[
   PartyInfo = (
       identity : bstr / nil,
       nonce : bstr / int / nil,
       other : bstr / nil
   )

   COSE_KDF_Context = [
       AlgorithmID : int / tstr,
       PartyUInfo : [ PartyInfo ],
       PartyVInfo : [ PartyInfo ],
       SuppPubInfo : [
           keyDataLength : uint,
           protected : empty_or_serialized_map,
           ? other : bstr
       ],
       ? SuppPrivInfo : bstr
   ]
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<section anchor="one-layer-example"><name>Single Recipient / One Layer Example</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the COSE_Encrypt0 structure using the HPKE scheme is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>It uses the following algorithm combination: 
- KEM: DHKEM(P-256, HKDF-SHA256)
- KDF: HKDF-SHA256
- AEAD: AES-128-GCM</t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
// payload: "This is the content", aad: ""
// 
16([
    h'a10120',  // alg = HPKE-v1-BASE
    {
        4: h'3031', // kid
        -4: [       // sender_info
            16,     // kem = DHKEM(P-256, HKDF-SHA256)
            1,      // kdf = HKDF-SHA256
            1,      // aead = AES-128-GCM
            h'048c6f75e463a773082f3cb0d3a701348a578c67
              80aba658646682a9af7291dfc277ec93c3d58707
              818286c1097825457338dc3dcaff367e2951342e
              9db30dc0e7',  // enc
        ],
    },
    / encrypted plaintext /
    h'ee22206308e478c279b94bb071f3a5fbbac412a6effe34195f7
      c4169d7d8e81666d8be13',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>Multiple Recipients / Two Layer</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the two-layer structure.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-two"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>It uses the following algorithm combination:</t>

<t><list style="symbols">
  <t>At layer 0 AES-128-GCM is used for encryption of the detached plaintext
"This is the content.".</t>
  <t>At the recipient structure at layer 1, DHKEM(P-256, HKDF-SHA256)
(as the KEM), with AES-128-GCM (as the AEAD) and HKDF-SHA256
(as the KDF) is used.</t>
</list></t>

<t>The algorithm selection is based on the registry of the values offered
by the alg parameters (see <xref target="IANA"/>).</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-two"><artwork><![CDATA[
// plaintext: "This is the content.", aad: ""
96_0([
    h'a10101',  // alg = AES-128-GCM (1)
    {5: h'67303696a1cc2b6a64867096'},  // iv
    h'',        // detached ciphertext
    [
        [
            h'a10120',  // alg = HPKE-v1-BASE (-1 #TBD)
            {
                4: h'3031', // kid
                -4: [       // sender_info
                    16,     // kem = DHKEM(P-256, HKDF-SHA256)
                    1,      // kdf = HKDF-SHA256
                    1,      // aead = AES-128-GCM
                    / enc output /
                    h'0421ccd1b00dd958d77e10399c
                         97530fcbb91a1dc71cb3bf41d9
                         9fd39f22918505c973816ecbca
                         6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c',
                ],
            },
            // ciphertext containing encrypted CEK
            h'bb2f1433546c55fb38d6f23f5cd95e1d72eb4
              c129b99a165cd5a28bd75859c10939b7e4d',
        ],

        [
            h'a10120',  // alg = HPKE-v1-BASE (-1 #TBD)
            {
                4: h'313233', // kid
                -4: [       // sender_info
                    16,     // kem = DHKEM(P-256, HKDF-SHA256)
                    1,      // kdf = HKDF-SHA256
                    1,      // aead = AES-128-GCM
                    / enc output /
                       h'6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c
                         9fd39f22918505c973816ecbca
                         6de507c4073d05cceff73e0d35
                         f60e2373e09a9433be9e95e53c',
                ],
            },
            // ciphertext containing encrypted CEK
            h'c4169d7d8e81666d8be13bb2f1433546c55fb
              c129b99a165cd5a28bd75859c10939b7e4d',
        ]        
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-two"/>
is signed with a COSE_Sign1 wrapper, which is shown in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> corresponds to the content shown in
<xref target="hpke-example-two"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of HPKE
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and the it MUST be
ensured that the guidelines for random number generations are followed.</t>

<t>The COSE_Encrypt structure MUST be authenticated using COSE constructs like 
COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0.</t>

<t>When COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Algorithm Parameters' registries in the 'Standards Action 
With Expert Review category.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-v1-BASE</t>
  <t>Value: TBD1 (Assumed: -1)</t>
  <t>Description: HPKE in version 1 in base mode for use with COSE</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-algorithm-parameters"><name>COSE Header Algorithm Parameters</name>

<t><list style="symbols">
  <t>Name: sender_info</t>
  <t>Label: TBD2 (Assumed: -4)</t>
  <t>Value type: sender_info</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE Sender Information structure for the Base mode.</t>
</list></t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>



<reference anchor='RFC9052'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t><t>This document, along with RFC 9053, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='STD' value='96'/>
<seriesInfo name='RFC' value='9052'/>
<seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>



<reference anchor='RFC9053'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052). </t><t>This document, along with RFC 9052, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='RFC' value='9053'/>
<seriesInfo name='DOI' value='10.17487/RFC9053'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>




    </references>


<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion.</t>

<t><list style="symbols">
  <t>Daisuke Ajitomi</t>
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley for his contributions to
the draft as a co-author of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank John Mattsson, Mike Prorock, Michael Richardson,
Goeran Selander, Laurence Lundblade and Orie Steele for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
riR/CSoO2aTL/hu7nm8wi1MAAA==

-->

</rfc>

