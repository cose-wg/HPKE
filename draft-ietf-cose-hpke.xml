<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-16" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization abbrev="H-BRS">University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2025" month="August" day="23"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 69?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE is a general encryption framework utilizing an asymmetric key encapsulation
mechanism (KEM), a key derivation function (KDF), and an Authenticated Encryption
with Associated Data (AEAD) algorithm.</t>

<t>This document defines the use of HPKE with COSE. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by the pre-shared key authenticated
variant of HPKE.</t>



    </abstract>



  </front>

  <middle>


<?line 83?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>)
with the single-shot APIs defined in Section 6 of <xref target="RFC9180"/>. Multiple
invocations of Open() / Seal() on the same context, as discussed in
Section 9.7.1 of <xref target="RFC9180"/> are not supported.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Integrated Encryption mode, where HPKE is used to encrypt
the plaintext. This mode can only be used with a single recipient.
<xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a
content encryption key (CEK) and the CEK is subsequently used to
encrypt the plaintext. This mode supports multiple recipients.
<xref target="two-layer"/> provides the details.</t>
</list></t>

<t>In both cases, a new COSE header parameter called 'ek' is used
to convey the content of the enc structure defined in the HPKE
specification. The enc value represents the serialized encapsulated
public key.</t>

<t>When used with HPKE, the 'ek' header parameter MUST be present in
the unprotected header and MUST contain the encapsulated key,
which is the output of the HPKE KEM. The value of 'ek' MUST be a
bstr.</t>

<t>HPKE defines several authentication modes, as described in Table 1 of <xref target="RFC9180"/>.
In COSE HPKE, only 'mode_base' and 'mode_psk' are supported. The mode is 'mode_psk' if
the 'psk_id' header parameter is present; otherwise, the mode defaults to 'mode_base'.
'mode_base' is described in Section 5.1.1 of <xref target="RFC9180"/>, which only enables encryption
to the holder of a given KEM private key. 'mode_psk' is described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>

<section anchor="one-layer"><name>HPKE Integrated Encryption Mode</name>

<t>This mode applies if the COSE_Encrypt0 structure uses a COSE-HPKE algorithm
and has no recipient structure(s).</t>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it MUST be included
in the protected header and MUST be a COSE-HPKE algorithm.</t>

<t>Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this document RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 structure includes a 'kid' parameter, the
recipient MAY use it to select the corresponding private key.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into an HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw message plaintext.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be used as layer ciphertext. If not using detached content, this is directly placed as
ciphertext in COSE_Encrypt0 structure. Otherwise, it is transported separately and the ciphertext field is nil.
See Section 5 of <xref target="RFC9052"/> for a description of detached payloads.</t>
</list></t>

<t>If 'mode_psk' has been selected, then the 'psk_id' parameter MUST be present.
If 'mode_base' has been chosen, then the 'psk_id' parameter MUST NOT be present.</t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into an HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>enc: The contents of the layer 'ek' parameter.</t>
  <t>ct: The contents of the layer ciphertext.</t>
</list></t>

<t>The plaintext output is the raw message plaintext.</t>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>This mode is selected if the COSE_recipient structure uses a COSE-HPKE algorithm.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the COSE_recipient structure using a COSE-HPKE algorithm.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key that the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This section defines the Recipient_structure, which is used in place of COSE_KDF_Context
for COSE-HPKE recipients. It MUST be used for COSE-HPKE recipients, as it provides
integrity protection for recipient-protected header parameters.</t>

<t>The Recipient_structure is modeled after the Enc_structure defined in <xref target="RFC9052"/>,
but is specific to COSE_recipient structures and MUST NOT be used with COSE_Encrypt.</t>

<t>Furthermore, the use of COSE_KDF_Context is prohibited in COSE-HPKE; it MUST NOT be
used.</t>

<figure><artwork><![CDATA[
Recipient_structure = [
    context: "HPKE Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_extra_info: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a where the attacker manipulates the content-encryption
algorithm identifier. This attack has been demonstrated against CMS and the mitigation
can be found in <xref target="I-D.ietf-lamps-cms-cek-hkdf-sha256"/>.</t>
  <t>"recipient_protected_header" contains the protected header parameters from the COSE_recipient
CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements",
specified in Section 4.2.1 of RFC 8949 <xref target="STD94"/>.</t>
  <t>"recipient_extra_info" contains any additional context the application wishes to include in
the key derivation via the HPKE info parameter. If none, it is a zero-length string.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>Because COSE-HPKE supports header protection, if the 'alg' parameter is present, it
MUST be in the protected header parameters and MUST be a COSE-HPKE algorithm.</t>

<t>The protected header MAY contain the kid parameter to identify the static recipient
public key that the sender used. Use of the 'kid' parameter is RECOMMENDED
to explicitly identify the static recipient public key used by the sender.
Including it in the protected header parameters ensures that it is input into the
key derivation function of HPKE.</t>

<t>When encrypting, the inputs to the HPKE Seal operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>pkR: The recipient public key, converted into HPKE public key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>pt: The raw key for the next layer down.</t>
</list></t>

<t>The outputs are used as follows:</t>

<t><list style="symbols">
  <t>enc: MUST be placed raw into the 'ek' (encapsulated key) parameter in the unprotected bucket.</t>
  <t>ct: MUST be placed raw in the ciphertext field in the COSE_recipient.</t>
</list></t>

<t>When decrypting, the inputs to the HPKE Open operation are set as follows:</t>

<t><list style="symbols">
  <t>kem_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>skR: The recipient private key, converted into HPKE private key.</t>
  <t>kdf_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>aead_id: Depends on the COSE-HPKE algorithm used.</t>
  <t>info: Deterministic encoding of the Recipient_structure.</t>
  <t>aad: Defaults to the empty string; externally provided information MAY be used instead.</t>
  <t>ct: The contents of the layer ciphertext field.</t>
</list></t>

<t>The plaintext output is the raw key for the next layer down.</t>

<t>It is not necessary to populate recipient_aad, as HPKE inherently mitigates the classes of
attacks that COSE_KDF_Context, and SP800-56A are designed to address. COSE-HPKE use cases
may still utilize recipient_aad for other purposes as needed; however, it is generally
intended for small values such as identifiers, contextual information, or secrets. It is
not designed for protecting large or bulk external data.</t>

<t>Any bulk external data that requires protection should be handled at layer 0 using external_aad.</t>

<t>The COSE_recipient structure is computed for each recipient.</t>

<t>When encrypting the content at layer 0, the instructions in <xref section="5.3" sectionFormat="of" target="RFC9052"/> MUST be followed, including the calculation of the
authenticated data structure.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>If the "kty" field is "AKP", then the public and private keys SHALL be the raw HPKE public and private
keys (respectively) for the KEM used by the algorithm.</t>
  <t>Otherwise, the key MUST be suitable for the KEM used by the algorithm. In case the "kty" parameter
is "EC2" or "OKP", this means the value of "crv" parameter is suitable. The valid combinations of
KEM, "kty" and "crv" for the algorithms defined in this document are shown in <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
A COSE-HPKE algorithm is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>The HPKE mode is determined by the presence or absence of the
'psk_id' parameter and is therefore not explicitly indicated in the
ciphersuite.</t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document and the values registered in the HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Ciphersuite Label                                | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-0                                           |0x10 | 0x1 | 0x1  |
| HPKE-1                                           |0x11 | 0x2 | 0x2  |
| HPKE-2                                           |0x12 | 0x3 | 0x2  |
| HPKE-3                                           |0x20 | 0x1 | 0x1  |
| HPKE-4                                           |0x20 | 0x1 | 0x3  |
| HPKE-5                                           |0x21 | 0x3 | 0x2  |
| HPKE-6                                           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>The following list maps the ciphersuite labels to their textual
description.</t>

<t><list style="symbols">
  <t>HPKE-0: DHKEM(P-256, HKDF-SHA256) KEM, HKDF-SHA256 KDF and AES-128-GCM AEAD.</t>
  <t>HPKE-1: DHKEM(P-384, HKDF-SHA384) KEM, HKDF-SHA384 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-2: DHKEM(P-521, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-3: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and AES-128-GCM AEAD.</t>
  <t>HPKE-4: DHKEM(X25519, HKDF-SHA256) KEM, HKDF-SHA256 KDF, and ChaCha20Poly1305 AEAD.</t>
  <t>HPKE-5: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and AES-256-GCM AEAD.</t>
  <t>HPKE-6: DHKEM(X448, HKDF-SHA512) KEM, HKDF-SHA512 KDF, and ChaCha20Poly1305 AEAD.</t>
</list></t>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extent to strike a balance between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA COSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that constitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE algorithm uniquely determines the KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the KEM used, COSE_Key type, and its curve/key subtype.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| HPKE KEM id         | COSE_Key     |
|                     | kty | crv    |
+---------------------+-----+--------+
| 0x0010, 0x0013      | EC2 | P-256  |
| 0x0011, 0x0014      | EC2 | P-384  |
| 0x0012, 0x0015      | EC2 | P-521  |
| 0x0020              | OKP | X25519 |
| 0x0021              | OKP | X448   |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that show all COSE message types
(COSE_Encrypt0 and COSE_Encrypt) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Integrated Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Integrated Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-0</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-0 (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of key encryption using the COSE_Encrypt structure using HPKE is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following input parameters:</t>

<t><list style="symbols">
  <t>Content encryption algorithm: AES-128-GCM</t>
  <t>plaintext: "This is the payload."</t>
  <t>kid:"alice"</t>
  <t>alg: HPKE-0 - DHKEM(P-256, HKDF-SHA256), KDF: HKDF-SHA256, AEAD: AES-128-GCM</t>
  <t>external_aad: "some externally provided aad"</t>
</list></t>

<t>Alice uses the following NIST P-256 ECC keys.</t>

<t>Private Key:</t>

<figure><artwork><![CDATA[
0xaf, 0xf9, 0x07, 0xc9, 0x9f, 0x9a, 0xd3, 0xaa,
0xe6, 0xc4, 0xcd, 0xf2, 0x11, 0x22, 0xbc, 0xe2,
0xbd, 0x68, 0xb5, 0x28, 0x3e, 0x69, 0x07, 0x15,
0x4a, 0xd9, 0x11, 0x84, 0x0f, 0xa2, 0x08, 0xcf
]]></artwork></figure>

<t>Public Key:</t>

<figure><artwork><![CDATA[
/* SEC Serialization of X and Y */
0x04,

/* X & Y */
0x65, 0xed, 0xa5, 0xa1, 0x25, 0x77, 0xc2, 0xba,
0xe8, 0x29, 0x43, 0x7f, 0xe3, 0x38, 0x70, 0x1a,
0x10, 0xaa, 0xa3, 0x75, 0xe1, 0xbb, 0x5b, 0x5d,
0xe1, 0x08, 0xde, 0x43, 0x9c, 0x08, 0x55, 0x1d,

0x1e, 0x52, 0xed, 0x75, 0x70, 0x11, 0x63, 0xf7,
0xf9, 0xe4, 0x0d, 0xdf, 0x9f, 0x34, 0x1b, 0x3d,
0xc9, 0xba, 0x86, 0x0a, 0xf7, 0xe0, 0xca, 0x7c,
0xa7, 0xe9, 0xee, 0xcd, 0x00, 0x84, 0xd1, 0x9c
]]></artwork></figure>

<t>As a result, the following COSE_Encrypt payload is
created:</t>

<figure><artwork><![CDATA[
d8 60 84 43 a1 01 01 a1 05 50 7f 55 a2 6b 98 c0 
49 b4 28 a7 cf 25 9d c3 0e 54 58 23 3f ae 53 ee 
83 55 ee 40 4e 86 7c 00 74 f8 c3 8c 6d 13 6b 65 
bb 61 93 92 79 b4 38 48 c5 8c b6 a4 76 03 55 81 
83 4b a2 01 18 23 04 45 61 6c 69 63 65 a1 23 58 
41 04 fe 73 6d 1d 93 11 4d f6 11 3b c2 87 cd 8e 
63 67 e1 0a b4 78 d7 fe df ac a1 6e 12 6f f0 16 
d6 95 d5 f7 22 34 03 e3 99 60 75 55 bc cf b9 65 
17 5f 49 14 e0 47 73 f7 04 07 5b 46 58 bf 7a dd 
84 a3 58 20 55 12 c2 35 7d 4c b6 bd 23 8a 5f bc 
10 84 b6 c9 74 0a c2 41 1d 93 63 7a 51 e6 9d 51 
0b 4f ae f8 
]]></artwork></figure>

<t>Decoded, this hex-sequence has the following
content:</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

  96([
       / alg = AES-128-GCM (1) /
       h'A10101',
       {
           / iv /
           5: h'33739C468ACB8EEC693C563EAEA12DD0'
       },
       / ciphertext /
       h'\
1F3EE9966D5CEE016E49365CF366FD608F271FC3B5ABDD5253844EE38EE6ABB7F555\
                                                                 9A',
       [
           [
               / alg = HPKE-0 (35), kid = 'alice' /
               h'A20118230445616C696365',
               {
                   / ek /
                   -4: h'\
040506BE8D9C2AFE42D3330676A3F616BAE02F6779D962449F26759B8D1E8F4DF10C\
      9F344627DEB063EE1DDB4858A5E7605BD09ECEB409B037E6E61F44D1E946C1'
               },
               / ciphertext containing encrypted CEK /
               h'\
    B11361397A19E9C155C3E0E8117B5E88155600E550DDE03DC834A46A182DE6F1'
           ]
       ]
   ])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<t>Bob uses the following signature key to sign the COSE_Encrypt payload
without any additional data.</t>

<t>Private Key:</t>

<figure><artwork><![CDATA[
0xd9, 0xb5, 0xe7, 0x1f, 0x77, 0x28, 0xbf, 0xe5,
0x63, 0xa9, 0xdc, 0x93, 0x75, 0x62, 0x27, 0x7e,
0x32, 0x7d, 0x98, 0xd9, 0x94, 0x80, 0xf3, 0xdc,
0x92, 0x41, 0xe5, 0x74, 0x2a, 0xc4, 0x58, 0x89
]]></artwork></figure>

<t>The output of the message is as follows:</t>

<figure title="COSE_Sign1 Example" anchor="hpke-example-sign"><artwork><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

18([
       / alg = ES256 (-7) /
       h'A10126',
       {
          / kid = 'bob' /
          4: h'626F62'
       },
       / payload / h'\
D8608443A10101A1055033739C468ACB8EEC693C563EAEA12DD058231F3EE9966D5C\
EE016E49365CF366FD608F271FC3B5ABDD5253844EE38EE6ABB7F5559A81834BA201\
18230445616C696365A1235841040506BE8D9C2AFE42D3330676A3F616BAE02F6779\
D962449F26759B8D1E8F4DF10C9F344627DEB063EE1DDB4858A5E7605BD09ECEB409\
B037E6E61F44D1E946C15820B11361397A19E9C155C3E0E8117B5E88155600E550DD\
                                            E03DC834A46A182DE6F1',   
       / Signature /
       h'\
7F9A83D1753E6FA8475A1250A786DA3E680265949A0AEE1984895A406E41AE8A2966\
        38CA64AE270C5317829BD3968EF76C42DF1566DADC9A68B06BA6ED376B8A'
  ])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-0"><name>KEM Public Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375
              e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af
              7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-0"><name>KEM Private Key for HPKE-0</name>

<figure title="Key Representation Example for HPKE-0" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-0 (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f7
              45228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72
              ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04
              e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-4"><name>KEM Public Key for HPKE-4</name>

<figure title="Key Representation Example for HPKE-4" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-4 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa
              9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>Both HPKE and HPKE COSE assume that the sender possesses the recipient's
public key. Therefore, some form of public key distribution mechanism is
assumed to exist, but this is outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generation are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_Mac, or COSE_Mac0 can be
used to add authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_Mac, 
or COSE_Mac0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<section anchor="hpke-0"><name>HPKE-0</name>

<t><list style="symbols">
  <t>Name: HPKE-0</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-1"><name>HPKE-1</name>

<t><list style="symbols">
  <t>Name: HPKE-1</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-2"><name>HPKE-2</name>

<t><list style="symbols">
  <t>Name: HPKE-2</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-3"><name>HPKE-3</name>

<t><list style="symbols">
  <t>Name: HPKE-3</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-4"><name>HPKE-4</name>

<t><list style="symbols">
  <t>Name: HPKE-4</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-5"><name>HPKE-5</name>

<t><list style="symbols">
  <t>Name: HPKE-5</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="hpke-6"><name>HPKE-6</name>

<t><list style="symbols">
  <t>Name: HPKE-6</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<section anchor="ek-header-parameter"><name>ek Header Parameter</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
<section anchor="pskid-header-parameter"><name>psk_id Header Parameter</name>

<t><list style="symbols">
  <t>Name: psk_id</t>
  <t>Label: TBDX (Assumed: -5)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: A key identifier (kid) for the pre-shared key
as defined in <xref section="5.1.2" sectionFormat="of" target="RFC9180"/></t>
  <t>Reference: [[TBD: This RFC]]</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<referencegroup anchor="STD94" target="https://www.rfc-editor.org/info/std94">
  <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
    <front>
      <title>Concise Binary Object Representation (CBOR)</title>
      <author fullname="C. Bormann" initials="C." surname="Bormann"/>
      <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
      <date month="December" year="2020"/>
      <abstract>
        <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
        <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
      </abstract>
    </front>
    <seriesInfo name="STD" value="94"/>
    <seriesInfo name="RFC" value="8949"/>
    <seriesInfo name="DOI" value="10.17487/RFC8949"/>
  </reference>
</referencegroup>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="3" month="March" year="2025"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-06"/>
   
</reference>


<reference anchor="I-D.ietf-lamps-cms-cek-hkdf-sha256">
   <front>
      <title>Encryption Key Derivation in the Cryptographic Message Syntax (CMS) using HKDF with SHA-256</title>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <date day="19" month="September" year="2024"/>
      <abstract>
	 <t>   This document specifies the derivation of the content-encryption key
   or the content-authenticated-encryption key in the Cryptographic
   Message Syntax (CMS) using HMAC-based Extract-and-Expand Key
   Derivation Function (HKDF) with SHA-256.  The use of this mechanism
   provides protection against where the attacker manipulates the
   content-encryption algorithm identifier or the content-authenticated-
   encryption algorithm identifier.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-lamps-cms-cek-hkdf-sha256-05"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>
<reference anchor="NIST.SP.800-56Ar3" target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf">
  <front>
    <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography, NIST Special Publication 800-56A Revision 3</title>
    <author >
      <organization>National Institute of Standards and Technology</organization>
    </author>
    <date year="2018" month="April"/>
  </front>
</reference>


    </references>

</references>


<?line 803?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like to thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank
Michael B. Jones,
John Mattsson,
Mike Prorock,
Michael Richardson,
Thomas Fossati,
and
GÃ¶ran Selander
for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

