<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="pre5378Trust200902" docName="draft-ietf-cose-hpke-08" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="COSE HPKE">Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>University of Applied Sciences Bonn-Rhein-Sieg</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="O." surname="Steele" fullname="Orie Steele" role="editor">
      <organization>Transmute</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>orie@transmute.industries</email>
      </address>
    </author>
    <author initials="D." surname="Ajitomi" fullname="Daisuke Ajitomi">
      <organization>bibital</organization>
      <address>
        <postal>
          <country>Japan</country>
        </postal>
        <email>dajiaji@gmail.com</email>
      </address>
    </author>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>

    <date year="2024" month="July" day="05"/>

    <area>Security</area>
    <workgroup>COSE</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 61?>

<t>This specification defines hybrid public-key encryption (HPKE) for use with 
CBOR Object Signing and Encryption (COSE). HPKE offers a variant of
public-key encryption of arbitrary-sized plaintexts for a recipient public key.</t>

<t>HPKE works for any combination of an asymmetric key encapsulation mechanism (KEM),
key derivation function (KDF), and authenticated encryption with
additional data (AEAD) function. Authentication for HPKE in COSE is
provided by COSE-native security mechanisms or by one of the authenticated
variants of HPKE.</t>

<t>This document defines the use of the HPKE with COSE.</t>



    </abstract>



  </front>

  <middle>


<?line 75?>

<section anchor="introduction"><name>Introduction</name>

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient's public key.</t>

<t>This document defines the use of the HPKE with COSE (<xref target="RFC9052"/>, <xref target="RFC9053"/>).</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This specification uses the following abbreviations and terms:</t>

<t><list style="symbols">
  <t>Content-encryption key (CEK), a term defined in CMS <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE) is defined in <xref target="RFC9180"/>.</t>
  <t>pkR is the public key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>skR is the private key of the recipient, as defined in <xref target="RFC9180"/>.</t>
  <t>Key Encapsulation Mechanism (KEM), see <xref target="RFC9180"/>.</t>
  <t>Key Derivation Function (KDF), see <xref target="RFC9180"/>.</t>
  <t>Authenticated Encryption with Associated Data (AEAD), see <xref target="RFC9180"/>.</t>
  <t>Additional Authenticated Data (AAD), see <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="hpke-for-cose"><name>HPKE for COSE</name>

<section anchor="overview"><name>Overview</name>

<t>This specification supports two modes of HPKE in COSE, namely</t>

<t><list style="symbols">
  <t>HPKE Direct Encryption mode, where HPKE is used to encrypt the plaintext. This mode can only be used with a single recipient. <xref target="one-layer"/> provides the details.</t>
  <t>HPKE Key Encryption mode, where HPKE is used to encrypt a content encryption key (CEK) and the CEK is subsequently used to encrypt the plaintext. This mode supports multiple recipients. <xref target="two-layer"/> 
  provides the details.</t>
</list></t>

<t>In both cases a new COSE header parameter, called 'ek',
is used to convey the content of the enc structure defined in the HPKE
specification. "Enc" represents the serialized public key.</t>

<t>For use with HPKE the 'ek' header parameter MUST
be present in the unprotected header parameter and MUST contain
the encapsulated key, which is output of the HPKE KEM, and it
is a bstr.</t>

<section anchor="one-layer"><name>HPKE Direct Encryption Mode</name>

<t>With the HPKE Direct Encryption mode the information carried inside the 
COSE_recipient structure is embedded inside the COSE_Encrypt0.</t>

<t>HPKE is used to directly encrypt the plaintext and the resulting ciphertext
is either included in the COSE_Encrypt0 or is detached. If a payload is
transported separately then it is called "detached content". A nil CBOR
object is placed in the location of the ciphertext. See Section 5
of <xref target="RFC9052"/> for a description of detached payloads.</t>

<t>The sender MUST set the alg parameter in the protected header, which
indicates the use of HPKE.</t>

<t>The sender MUST place the 'ek' (encapsulated key) parameter into the unprotected
header. Although the use of the 'kid' parameter in COSE_Encrypt0 is
discouraged by RFC 9052, this documents RECOMMENDS the use of the 'kid' parameter
(or other parameters) to explicitly identify the static recipient public key
used by the sender. If the COSE_Encrypt0 contains the 'kid' then the recipient may
use it to select the appropriate private key.</t>

<t>The HPKE specification describes an API and this API uses an "aad" parameter
as input. When COSE_Encrypt0 is used then there is no AEAD function executed
by COSE natively and HPKE offers this functionality.</t>

<t>The "aad" parameter provided to the HPKE API is constructed
as follows (and the design has been re-used from <xref target="RFC9052"/>):</t>

<figure><artwork><![CDATA[
Enc_structure = [
    context : "Encrypt0",
    protected : empty_or_serialized_map,
    external_aad : bstr
]

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0
]]></artwork></figure>

<t>The protected field in the Enc_structure contains the protected attributes
from the COSE_Encrypt0 structure at layer 0, encoded in a bstr type.</t>

<t><xref target="cddl-hpke-one-layer"/> shows the COSE_Encrypt0 CDDL structure.</t>

<figure title="CDDL used for the HPKE Direct Encryption Mode" anchor="cddl-hpke-one-layer"><artwork><![CDATA[
COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)

; Layer 0
COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]
]]></artwork></figure>

<t>The COSE_Encrypt0 MAY be tagged or untagged.</t>

<t>An example is shown in <xref target="one-layer-example"/>.</t>

</section>
<section anchor="two-layer"><name>HPKE Key Encryption Mode</name>

<t>With the HPKE Key Encryption mode information is conveyed in the COSE_recipient 
structure, i.e. one COSE_recipient structure per recipient.</t>

<t>In this approach the following layers are involved:</t>

<t><list style="symbols">
  <t>Layer 0 (corresponding to the COSE_Encrypt structure) contains the content (plaintext)
encrypted with the CEK. This ciphertext may be detached, and if not detached, then
it is included in the COSE_Encrypt structure.</t>
  <t>Layer 1 (corresponding to a recipient structure) contains parameters needed for 
HPKE to generate a shared secret used to encrypt the CEK. This layer conveys the 
encrypted CEK in the encCEK structure. The protected header MUST contain the HPKE 
alg parameter and the unprotected header MUST contain the 'ek' parameter.
The unprotected header MAY contain the kid parameter to identify the static recipient
public key the sender has been using with HPKE.</t>
</list></t>

<t>This two-layer structure is used to encrypt content that can also be shared with
multiple parties at the expense of a single additional encryption operation.
As stated above, the specification uses a CEK to encrypt the content at layer 0.</t>

<section anchor="recipient-encryption"><name>Recipient Encryption</name>

<t>This describes the Recipient_structure.
It serves instead of COSE_KDF_Context for COSE-HPKE recipients (and possibly other COSE algorithms defined outside this document).
It MUST be used for COSE-HPKE recipients as it provides the protection for recipient protected headers.
It is patterned after the Enc_structure in <xref target="RFC9052"/>, but is specifically for a COSE_recipient, never a COSE_Encrypt.
The COSE_KDF_Context MUST NOT be used in COSE-HPKE.</t>

<figure><artwork><![CDATA[
Recipient_structure = [ 
    context: "Recipient",
    next_layer_alg: int/tstr,
    recipient_protected_header: empty_or_serialize_map,
    recipient_aad: bstr
]
]]></artwork></figure>

<t><list style="symbols">
  <t>"next_layer_alg" is the algorithm ID of the COSE layer for which the COSE_recipient is encrypting a key.
It is the algorithm that the key MUST be used with.
This value MUST match the alg parameter in the next lower COSE layer.
(This serves the same purpose as the alg ID in the COSE_KDF_Context.
It also mitigates attacks where a person-in-the-middle changes the following layer algorithm from an AEAD algorithm to one that is not foiling the protection of the following layer headers).</t>
  <t>"recipient_protected_header" contains the protected headers from the COSE_recipient CBOR-encoded deterministically with the "Core Deterministic Encoding Requirements", specified in Section 4.2.1 of RFC 8949 <xref target="STD94"/>.</t>
  <t>"recipient_aad" contains any additional context the application wishes to protect.
If none, it is a zero-length string.
This is distinct from the external_aad for the whole COSE encrypt.
It is per-recipient.
Since it is not a header, it may be secret data that is not transmitted.
It provides a means to convey many of the fields in COSE_KDF_Context.</t>
</list></t>

</section>
<section anchor="cose-hpke-recipient-construction"><name>COSE-HPKE Recipient Construction</name>

<t>This is the procedure for creating a COSE_recipient for COSE-HPKE.</t>

<t>When a COSE_recipeint is constructed for a COSE-HPKE recipient, this is given as the "aad" parameter to the HPKE Seal() API.
The "info" parameter to HPKE_Seal is not used with COSE_HPKE.</t>

<t>The creation of the COSE_recipient is as follows:</t>

<t><list style="numbers">
  <t>Prepare a Recipient_structure</t>
  <t>Obtain the key To used use by the next lowest layer</t>
  <t>Pass in the following parameters to HPKE Seal API
  <list style="numbers">
      <t>Public key of recipient for "pKR"</t>
      <t>Empty string for "info"</t>
      <t>CBOR-encoded Recipient_structure for "aad"</t>
      <t>The key for next lowest COSE layer for "pt"</t>
    </list></t>
  <t>The following are returned from the HPKE Seal API
  <list style="numbers">
      <t>The "enc" is placed in the "ek" header of the COSE_recipient</t>
      <t>The "ct" is placed in the "ciphertext" field of the COSE_recipient</t>
    </list></t>
</list></t>

<t>The decoding and decryption of a COSE_recipient is as follows:</t>

<t><list style="numbers">
  <t>Prepare a Recipient_structure</t>
  <t>Pass in the following parameters to HPKE Open API
  <list style="numbers">
      <t>The "ek" header  for "enc"</t>
      <t>Secret key for recipient for "sKR"</t>
      <t>Empty string for "info"</t>
      <t>CBOR-encoded Recipient_structure for "aad"</t>
      <t>The cipher text from the COSE_recipient as "ct"</t>
    </list></t>
  <t>What is returned from HPKE Open API is the key for the next lowest COSE layer</t>
</list></t>

<t>It is not necessary to fill in recipient_aad as HPKE itself covers the attacks that recipient_aad (and COSE_KDF_Context (and SP800-56A)) are used to mitigate.
COSE-HPKE use cases may use it for any purpose they wish, but it should generally be for small identifiers, context or secrets, not to protect bulk external data.
Bulk external data should be protected at layer 0 with external_aad.</t>

<t>The COSE_recipient structure, shown in <xref target="cddl-hpke"/>, is repeated for each
recipient.</t>

<figure title="CDDL used for the HPKE Key Encryption Mode" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
/ Layer 0 /
COSE_Encrypt = [
  Headers,
  ciphertext : bstr / nil,
  recipients : + COSE_recipient
]

/ Layer 1 /
COSE_recipient = [
  protected   : bstr .cbor header_map,
  unprotected : header_map,
  encCEK      : bstr,
]

header_map = {
  Generic_Headers,
  * label => values,
}
]]></artwork></figure>

<t>The COSE_Encrypt MAY be tagged or untagged.</t>

<t>When encrypting the content at layer 0 then the instructions in
Section 5.3 of <xref target="RFC9052"/> MUST to be followed, which includes the
calculation of the authenticated data strcture.</t>

<t>An example is shown in <xref target="two-layer-example"/>.</t>

</section>
</section>
</section>
<section anchor="key-representation"><name>Key Representation</name>

<t>The COSE_Key with the existing key types can be used to represent KEM private
or public keys. When using a COSE_Key for COSE-HPKE, the following checks are made:</t>

<t><list style="symbols">
  <t>The "kty" field MUST be present, and it MUST be one of the key types for HPKE KEM.</t>
  <t>If the "kty" field is "OKP" or "EC2", the "crv" field MUST be present
and it MUST be a curve for HPKE KEM.</t>
  <t>If the "alg" field is present, it MUST be one of the supported COSE-HPKE "alg" values
and the key type of its KEM MUST match the "kty" field.
If the "kty" field is "OKP" or "EC2", the curve of the KEM MUST match the "crv" field.
The valid combinations of the "alg", "kty" and "crv" are shown in <xref target="ciphersuite-kty-crv"/>.</t>
  <t>If the "key_ops" field is present, it MUST include only "derive bits" for the private key
and MUST be empty for the public key.</t>
</list></t>

<t>Examples of the COSE_Key for COSE-HPKE are shown in <xref target="key-representation-example"/>.</t>

</section>
</section>
<section anchor="ciphersuite-registration"><name>Ciphersuite Registration</name>

<t>A ciphersuite is a group of algorithms, often sharing component algorithms
such as hash functions, targeting a security level.
An HPKE ciphersuite, is composed of the following choices:</t>

<t><list style="symbols">
  <t>HPKE Mode</t>
  <t>KEM Algorithm</t>
  <t>KDF Algorithm</t>
  <t>AEAD Algorithm</t>
</list></t>

<t>The "KEM", "KDF", and "AEAD" values are chosen from the HPKE IANA
registry <xref target="HPKE-IANA"/>.</t>

<t>For readability the algorithm ciphersuites labels are built according
to the following scheme:</t>

<figure><artwork><![CDATA[
HPKE-<Version>-<Mode>-<KEM>-<KDF>-<AEAD>
]]></artwork></figure>

<t>The "Mode" indicator may be populated with the following values from
Table 1 of <xref target="RFC9180"/>:</t>

<t><list style="symbols">
  <t>"Base" refers to "mode_base" described in Section 5.1.1 of <xref target="RFC9180"/>,
which only enables encryption to the holder of a given KEM private key.</t>
  <t>"PSK" refers to "mode_psk", described in Section 5.1.2 of <xref target="RFC9180"/>,
which authenticates using a pre-shared key.</t>
  <t>"Auth" refers to "mode_auth", described in Section 5.1.3 of <xref target="RFC9180"/>,
which authenticates using an asymmetric key.</t>
  <t>"Auth_Psk" refers to "mode_auth_psk", described in Section 5.1.4 of <xref target="RFC9180"/>,
which authenticates using both a PSK and an asymmetric key.</t>
</list></t>

<t>For a list of ciphersuite registrations, please see <xref target="IANA"/>. The following
table summarizes the relationship between the ciphersuites registered in this
document, which all use the "Base" mode and the values registered in the
HPKE IANA registry <xref target="HPKE-IANA"/>.</t>

<figure><artwork><![CDATA[
+--------------------------------------------------+------------------+
| COSE-HPKE                                        |      HPKE        |
| Cipher Suite Label                               | KEM | KDF | AEAD |
+--------------------------------------------------+-----+-----+------+
| HPKE-Base-P256-SHA256-A128GCM                    |0x10 | 0x1 | 0x1  |
| HPKE-Base-P384-SHA384-AS256GCM                   |0x11 | 0x2 | 0x2  |
| HPKE-Base-P521-SHA512-AS256GCM                   |0x12 | 0x3 | 0x2  |
| HPKE-Base-X25519-SHA256-A128GCM                  |0x20 | 0x1 | 0x1  |
| HPKE-Base-X25519-SHA256-ChaCha20Poly1305         |0x20 | 0x1 | 0x3  |
| HPKE-Base-X448-SHA512-AS256GCM                   |0x21 | 0x3 | 0x2  |
| HPKE-Base-X448-SHA512-ChaCha20Poly1305           |0x21 | 0x3 | 0x3  |
+--------------------------------------------------+-----+-----+------+
]]></artwork></figure>

<t>As the list indicates, the ciphersuite labels have been abbreviated at least
to some extend to maintain the tradeoff between readability and length.</t>

<t>The ciphersuite list above is a minimal starting point. Additional
ciphersuites can be registered into the already existing registry.
For example, once post-quantum cryptographic algorithms have been standardized
it might be beneficial to register ciphersuites for use with COSE-HPKE.
Additionally, ciphersuites utilizing the compact encoding of the public keys,
as defined in <xref target="I-D.irtf-cfrg-dnhpke"/>, may be standardized for use in
constrained environments.</t>

<t>As a guideline for ciphersuite submissions to the IANA CoSE algorithm
registry, the designated experts must only register combinations of 
(KEM, KDF, AEAD) triple that consitute valid combinations for use with
HPKE, the KDF used should (if possible) match one internally used by the
KEM, and components should not be mixed between global and national standards.</t>

<section anchor="cosekeys-for-cose-hpke-ciphersuites"><name>COSE_Keys for COSE-HPKE Ciphersuites</name>

<t>The COSE-HPKE ciphersuite uniquely determines the type of KEM for which a COSE_Key is used.
The following mapping table shows the valid combinations
of the COSE-HPKE ciphersuite, COSE_Key type and its curve.</t>

<figure title="COSE_Key Types and Curves for COSE-HPKE Ciphersuites" anchor="ciphersuite-kty-crv"><artwork><![CDATA[
+---------------------+--------------+
| COSE-HPKE           | COSE_Key     |
| Ciphersuite Label   | kty | crv    |
+---------------------+-----+--------+
| HPKE-Base-P256-\*   | EC2 | P-256  |
| HPKE-Base-P384-\*   | EC2 | P-384  |
| HPKE-Base-P521-\*   | EC2 | P-521  |
| HPKE-Base-X25519-\* | OKP | X25519 |
| HPKE-Base-X448-\*   | OKP | X448   |
| HPKE-Base-CP256-\*  | EC2 | P-256  |
| HPKE-Base-CP384-\*  | EC2 | P-384  |
| HPKE-Base-CP521-\*  | EC2 | P-521  |
+---------------------+-----+--------+
]]></artwork></figure>

</section>
</section>
<section anchor="examples"><name>Examples</name>

<t>This section provides a set of examples that shows all COSE message types
(COSE_Encrypt0, COSE_Encrypt and COSE_MAC) to which the COSE-HPKE can be
applied, and also provides some examples of key representation for HPKE KEM.</t>

<t>Each example of the COSE message includes the following information
that can be used to check the interoperability of COSE-HPKE implementations:</t>

<t><list style="symbols">
  <t>plaintext: Original data of the encrypted payload.</t>
  <t>external_aad: Externally supplied AAD.</t>
  <t>skR: A recipient private key.</t>
  <t>skE: An ephemeral sender private key paired with the encapsulated key.</t>
</list></t>

<section anchor="one-layer-example"><name>HPKE Direct Encryption Mode</name>

<t>This example assumes that a sender wants to communicate an
encrypted payload to a single recipient in the most efficient way.</t>

<t>An example of the HPKE Direct Encryption Mode is
shown in <xref target="hpke-example-one"/>. Line breaks and comments have been inserted
for better readability.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>external_aad: "COSE-HPKE app"</t>
  <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
  <t>skE: h'42dd125eefc409c3b57366e721a40043fb5a58e346d51c133128a77237160218'</t>
</list></t>

<figure title="COSE_Encrypt0 Example for HPKE" anchor="hpke-example-one"><artwork><![CDATA[
16([
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    h'a1011823',
    {
        / kid /
        4: h'3031',
        / ek /
        -4: h'045df24272faf43849530db6be01f42708b3c3a9
              df8e268513f0a996ed09ba7840894a3fb946cb28
              23f609c59463093d8815a7400233b75ca8ecb177
              54d241973e',
    },
    / encrypted plaintext /
    h'35aa3d98739289b83751125abe44e3b977e4b9abbf2c8cfaade
      b15f7681eef76df88f096',
])
]]></artwork></figure>

</section>
<section anchor="two-layer-example"><name>HPKE Key Encryption Mode</name>

<t>In this example we assume that a sender wants to transmit a
payload to two recipients using the HPKE Key Encryption mode.
Note that it is possible to send two single-layer payloads, 
although it will be less efficient.</t>

<section anchor="coseencrypt"><name>COSE_Encrypt</name>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-encrypt"/>. Line breaks and comments have been
inserted for better readability.</t>

<t>This example uses the following:</t>

<t>TODO: recompute this for Recipient_structure</t>

<t><list style="symbols">
  <t>Encryption alg: AES-128-GCM</t>
  <t>plaintext: "This is the content."</t>
  <t>detatched ciphertext: h'cc168c4e148c52a83010a75250935a47ccb8682deebcef8fce5d60c161e849f53a2dc664'</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'97ad883f949f4cdcb1301b9446950efd4eb519e16c4a3d78304eec832692f9f6'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'b8ed3f4df56c230e36fa6620a47f24d08856d242ea547c5521ff7bd69af8fd6f'</t>
    </list></t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-cose-encrypt"><artwork><![CDATA[
96_0([
    / alg = AES-128-GCM (1) /
    h'a10101',
    {
        / iv /
        5: h'b3fb95dde18c6f90a9f0ae55',
    },
    / detached ciphertext /
    null,
    [
        [
            / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
            h'a1011823',
            {
                / kid /
                4: h'3031',
                / ek /
                -4: h'04d97b79486fe2e7b98fb1bd43
                      c4faee316ff38d28609a1cf568
                      40a809298a91e601f1cc0c2ba4
                      6cb67b41f4651b769cafd9df78
                      e58aa7f5771291bd4f0f420ba6',
            },
            / ciphertext containing encrypted CEK /
            h'24450f54ae93375351467d17aa7a795cfede2
              c03eced1ad21fcb7e7c2fe64397',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid /
                4: h'3032',
                / ek /
                -4: h'd1afbdc95b0e735676f6bca34f
                      be50f2822259ac09bfc3c500f1
                      4a05de9b2833',
            },
            / ciphertext containing encrypted CEK /
            h'079b443ec6dfcda6a5f8748aff3875146a8ed
              40359e1279b545166385d8d9b59',
        ],
    ],
])
]]></artwork></figure>

<t>To offer authentication of the sender the payload in <xref target="hpke-example-cose-encrypt"/>
is signed with a COSE_Sign1 wrapper, which is outlined in <xref target="hpke-example-sign"/>.
The payload in <xref target="hpke-example-sign"/> is meant to contain the content of
<xref target="hpke-example-cose-encrypt"/>.</t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example-sign"><artwork><![CDATA[
18(
  [
    / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
    / unprotected / {
          / kid / 4:'sender@example.com'
        },
    / payload /     h'AA19...B80C',
    / signature /   h'E3B8...25B8'
  ]
)
]]></artwork></figure>

</section>
<section anchor="cosemac"><name>COSE_MAC</name>

<t>An example of the COSE_MAC structure using the HPKE scheme is
shown in <xref target="hpke-example-cose-mac"/>.</t>

<t>This example uses the following:</t>

<t><list style="symbols">
  <t>MAC alg: HMAC 256/256</t>
  <t>payload: "This is the content."</t>
  <t>kid:"01"
  <list style="symbols">
      <t>alg: HPKE-Base-P256-SHA256-A128GCM</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3'</t>
      <t>skE: h'e5dd9472b5807636c95be0ba2575020ba91cbb3561b52be141da89678c664307'</t>
    </list></t>
  <t>kid:"02"
  <list style="symbols">
      <t>alg: HPKE-Base-X25519-SHA256-CHACHA20POLY1305</t>
      <t>external_aad: "COSE-HPKE app"</t>
      <t>skR: h'bec275a17e4d362d0819dc0695d89a73be6bf94b66ab726ae0b1afe3c43f41ce'</t>
      <t>skE: h'78a49d7af71b5244498e943f361aa0250184afc48b8098a68ae97ccd2cd7e56f'</t>
    </list></t>
</list></t>

<figure title="COSE_MAC Example for HPKE" anchor="hpke-example-cose-mac"><artwork><![CDATA[
97_0([
    / alg = HMAC 256/256 (5) /
    h'a10105',
    {},
    / payload = 'This is the content.' /
    h'546869732069732074686520636f6e74656e742e',
    / tag /
    h'5cdcf6055fcbdb53b4001d8fb88b2a46b200ed28e1ed77e16ddf43fb3cac3a98',
    [
        [
            / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
            h'a1011823',
            {
                / kid = '01' /
                4: h'3031',
                / ek /
                -4: h'043ac21632e45e1fbd733f002a
                      621aa4f3d94737adc395d5a7cb
                      6e9554bd1ad273aec991493786
                      d72616d9759bf8526e6e20c1ed
                      c41ba5739f2b2e441781aa0eb4',
            },
            / ciphertext containing encrypted MAC key /
            h'5cee2b4235a7ff695164f7a8d1e79ccf3ca3d
              e8b22f3592626020a95b2a8d3fb4d7aa7fe37
              432426ee70073a368f29d1',
        ],
        [
            / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
            h'a101182a',
            {
                / kid = '02' /
                4: h'3032',
                / ek /
                -4: h'02cffacc60def3bb3d0a1c3661
                      227c9de8dc2b1d3939dd2c07d4
                      49ebb0bba324',
            },
            / ciphertext containing encrypted MAC key /
            h'3f5b8b60271d5234dbea554dc1461d0239e9f
              4589f6415e8563b061dbcb37795a616111b78
              2b4c589b534309327ffadc',
        ],
    ],
])
]]></artwork></figure>

</section>
</section>
<section anchor="key-representation-example"><name>Key Representation</name>

<t>Examples of private and public KEM key representation are shown below.</t>

<section anchor="kem-public-key-for-hpke-base-p256-sha256-a128gcm"><name>KEM Public Key for HPKE-Base-P256-SHA256-A128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-A128GCM" anchor="hpke-example-key-1"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    3: 35,
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'65eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c08551d',
    / y /
    -3: h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd0084d19c'
}
]]></artwork></figure>

</section>
<section anchor="kem-private-key-for-hpke-base-p256-sha256-a128gcm"><name>KEM Private Key for HPKE-Base-P256-SHA256-A128GCM</name>

<figure title="Key Representation Example for HPKE-Base-P256-SHA256-A128GCM" anchor="hpke-example-key-2"><artwork><![CDATA[
{
    / kty = 'EC2' /
    1: 2,
    / kid = '01' /
    2: h'3031',
    / alg = HPKE-Base-P256-SHA256-A128GCM (Assumed: 35) /
    3: 35,
    / key_ops = ['derive_bits'] /
    4: [8],
    / crv = 'P-256' /
    -1: 1,
    / x /
    -2: h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f745228255a219a86d6a09eff',
    / y /
    -3: h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72ccfed6b6fb6ed28bbfc117e',
    / d /
    -4: h'57c92077664146e876760c9520d054aa93c3afb04e306705db6090308507b4d3',
}
]]></artwork></figure>

</section>
<section anchor="kem-public-key-for-hpke-base-x25519-sha256-chacha20poly1305"><name>KEM Public Key for HPKE-Base-X25519-SHA256-CHACHA20POLY1305</name>

<figure title="Key Representation Example for HPKE-Base-X25519-SHA256-CHACHA20POLY1305" anchor="hpke-example-key-3"><artwork><![CDATA[
{
    / kty = 'OKP' /
    1: 1,
    / kid = '11' /
    2: h'3131',
    / alg = HPKE-Base-X25519-SHA256-CHACHA20POLY1305 (Assumed: 42) /
    3: 42,
    / crv = 'X25519' /
    -1: 4,
    / x /
    -2: h'cb7c09ab7b973c77a808ee05b9bbd373b55c06eaa9bd4ad2bd4e9931b1c34c22',
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>This specification is based on HPKE and the security considerations of
<xref target="RFC9180"/> are therefore applicable also to this specification.</t>

<t>HPKE assumes the sender is in possession of the public key of the recipient and
HPKE COSE makes the same assumptions. Hence, some form of public key distribution
mechanism is assumed to exist but outside the scope of this document.</t>

<t>HPKE relies on a source of randomness to be available on the device. Additionally, 
with the two layer structure the CEK is randomly generated and it MUST be
ensured that the guidelines in <xref target="RFC8937"/> for random number generations are followed.</t>

<t>HPKE in Base mode does not offer authentication as part of the HPKE KEM. In this
case COSE constructs like COSE_Sign, COSE_Sign1, COSE_MAC, or COSE_MAC0 can be
used to add authentication. HPKE also offers modes that offer authentication.</t>

<t>If COSE_Encrypt or COSE_Encrypt0 is used with a detached ciphertext then the
subsequently applied integrity protection via COSE_Sign, COSE_Sign1, COSE_MAC, 
or COSE_MAC0 does not cover this detached ciphertext. Implementers MUST ensure
that the detached ciphertext also experiences integrity protection. This is, for
example, the case when an AEAD cipher is used to produce the detached ciphertext
but may not be guaranteed by non-AEAD ciphers.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document requests IANA to add new values to the 'COSE Algorithms' and to 
the 'COSE Header Parameters' registries.</t>

<section anchor="cose-algorithms-registry"><name>COSE Algorithms Registry</name>

<t><list style="symbols">
  <t>Name: HPKE-Base-P256-SHA256-A128GCM</t>
  <t>Value: TBD1 (Assumed: 35)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-256, HKDF-SHA256) KEM, the HKDF-SHA256 KDF and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P384-SHA384-AS256GCM</t>
  <t>Value: TBD3 (Assumed: 37)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-384, HKDF-SHA384) KEM, the HKDF-SHA384 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-P521-SHA512-AS256GCM</t>
  <t>Value: TBD5 (Assumed: 39)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(P-521, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-A128GCM</t>
  <t>Value: TBD7 (Assumed: 41)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the AES-128-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X25519-SHA256-ChaCha20Poly1305</t>
  <t>Value: TBD8 (Assumed: 42)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X25519, HKDF-SHA256) KEM, the HKDF-SHA256 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-AS256GCM</t>
  <t>Value: TBD9 (Assumed: 43)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the AES-256-GCM AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
  <t>Name: HPKE-Base-X448-SHA512-ChaCha20Poly1305</t>
  <t>Value: TBD10 (Assumed: 44)</t>
  <t>Description: Cipher suite for COSE-HPKE in Base Mode that uses the DHKEM(X448, HKDF-SHA512) KEM, the HKDF-SHA512 KDF, and the ChaCha20Poly1305 AEAD.</t>
  <t>Capabilities: [kty]</t>
  <t>Change Controller: IESG</t>
  <t>Reference:  [[TBD: This RFC]]</t>
  <t>Recommended: Yes</t>
</list></t>

</section>
<section anchor="cose-header-parameters"><name>COSE Header Parameters</name>

<t><list style="symbols">
  <t>Name: ek</t>
  <t>Label: TBDX (Assumed: -4)</t>
  <t>Value type: bstr</t>
  <t>Value Registry: N/A</t>
  <t>Description: HPKE encapsulated key</t>
  <t>Reference: [[This specification]]</t>
</list></t>

</section>
</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC9180">
  <front>
    <title>Hybrid Public Key Encryption</title>
    <author fullname="R. Barnes" initials="R." surname="Barnes"/>
    <author fullname="K. Bhargavan" initials="K." surname="Bhargavan"/>
    <author fullname="B. Lipp" initials="B." surname="Lipp"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="February" year="2022"/>
    <abstract>
      <t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9180"/>
  <seriesInfo name="DOI" value="10.17487/RFC9180"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<referencegroup anchor="STD94" target="https://www.rfc-editor.org/info/std94">
  <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949">
    <front>
      <title>Concise Binary Object Representation (CBOR)</title>
      <author fullname="C. Bormann" initials="C." surname="Bormann"/>
      <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
      <date month="December" year="2020"/>
      <abstract>
        <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
        <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
      </abstract>
    </front>
    <seriesInfo name="STD" value="94"/>
    <seriesInfo name="RFC" value="8949"/>
    <seriesInfo name="DOI" value="10.17487/RFC8949"/>
  </reference>
</referencegroup>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC8937">
  <front>
    <title>Randomness Improvements for Security Protocols</title>
    <author fullname="C. Cremers" initials="C." surname="Cremers"/>
    <author fullname="L. Garratt" initials="L." surname="Garratt"/>
    <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
    <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
    <author fullname="C. Wood" initials="C." surname="Wood"/>
    <date month="October" year="2020"/>
    <abstract>
      <t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
      <t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8937"/>
  <seriesInfo name="DOI" value="10.17487/RFC8937"/>
</reference>

<reference anchor="RFC2630">
  <front>
    <title>Cryptographic Message Syntax</title>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <date month="June" year="1999"/>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax. This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2630"/>
  <seriesInfo name="DOI" value="10.17487/RFC2630"/>
</reference>


<reference anchor="I-D.irtf-cfrg-dnhpke">
   <front>
      <title>Deterministic Nonce-less Hybrid Public Key Encryption</title>
      <author fullname="Dan Harkins" initials="D." surname="Harkins">
         <organization>Hewlett-Packard Enterprise</organization>
      </author>
      <date day="5" month="February" year="2024"/>
      <abstract>
	 <t>   This document describes enhancements to the Hybrid Public Key
   Encryption standard published by CFRG.  These include use of &quot;compact
   representation&quot; of relevant public keys, support for key-wrapping,
   and two ways to address the use of HPKE on lossy networks: a
   determinstic, nonce-less AEAD scheme, and use of a rolling sequence
   number with existing AEAD schemes.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-dnhpke-04"/>
   
</reference>


<reference anchor="HPKE-IANA" target="https://www.iana.org/assignments/hpke/hpke.xhtml">
  <front>
    <title>Hybrid Public Key Encryption (HPKE) IANA Registry</title>
    <author >
      <organization>IANA</organization>
    </author>
    <date year="2023" month="October"/>
  </front>
</reference>


    </references>


<?line 803?>

<section anchor="contributors"><name>Contributors</name>

<t>We would like thank the following individuals for their contributions
to the design of embedding the HPKE output into the COSE structure 
following a long and lively mailing list discussion:</t>

<t><list style="symbols">
  <t>Richard Barnes</t>
  <t>Ilari Liusvaara</t>
</list></t>

<t>Finally, we would like to thank Russ Housley and Brendan Moran for their
contributions to the draft as co-authors of initial versions.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank John Mattsson, Mike Prorock, Michael Richardson,
and Goeran Selander for their review feedback.</t>

</section>


  </back>

<!-- ##markdown-source:
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
i0Gb22YTr/Km4c6InBNuG44rfY+7Q4xzLfNNnJb6uGYiBxxNJoKfnp0jR8fY
59nIoI3nRJyhAsOLDrzIUIBSebtpJ90kfTKM3kNGxc6dbxkL288ztVfPDqQv
hp4jPw3DZ4xoaZVGlxzdOQWNaglDcsDvVf4Ri8sFc11UMYgM1hADE2uAz0gj
ggzK7WlGfo/mxjR9gGEx9iDIpsz/vsGMRrVJKGGD8mLRoPV7ylr8QCaAiI2Z
HgOv6HrNBVJgkS5JbpvHhua4bY1r3nfERyL8+0Y4wY8ChtHTXXjgc98B/9qZ
+2Zg7T8T8HvhN3i+othjnf5e73RkrP/6O94auPPw+3wBjyZt8agYPJo0taNi
8GiHBYSCn8nZm3P4LZ5MGSbZmiwGT8i4teOOhkdJOO5oeJSE446GLRKeyN4u
arkdoOjil2p6L3ngiYfrNzzTYPdCwUjmM6IiC+rsjwT/2m4t5quD9DIVguD6
RMg6omS+E7HCbYdrsZAaY5jkOR/GSruthHdHxzx9e5jAIRcHt2kGFcfZ5TlS
THzoxiVtcR8WwWjUMNgxCogZp5isqMKaejKJGr0eM9VWuZZcaXTpXlpgkscP
ZegW1ApP2ZKGXyZDCaJy7HilRiciFV0iIz9Jf513+w/9ERuZtidPFKBTp+87
HMIMduoXg3f8/P/R0Yk8GndIjgZpTQNXuLk9hfclYWsMINSocEWSnH6Qbk3z
Wg8BjI8TCNX8xOMuXQBKypuaDtqAJ6eEi6ph3POjuDxRYLUC5Z3wVMjS2OKK
SLUcHwZTm40rQDaEZYhJ8Ok9fRiGuPUjPTtIABdRC6zx/GJZG/OM0Tt9i/Yf
cCO9bZTVEyccesSUlw3utqQGCiaYvZYNwkHLEU+2D3RykeE5WY96R0O5munZ
EHLjYTnbEqOZFkZcr2dKem72vCCJbDMIfN+1XJ+FgR/4ZhJ5tpmanktp5CQO
zWLTZY7pB6aXxr4ZmY4ZemYQu6mzpwTtZs+109SyPcayxDWjxIm9wPF9FtgW
dU3TdbLYo17IHNdPPSuxHAfooUFgO4Hlm7YV7glbaPn7Ijn8OU+Y+uErvuL+
ERcuoNHxDshzXvNmj1qmZYW2syfS0z511xY853mmz7vvLo7cMR1LlhRl2K1W
ZMHLmK6XZrZrB3ZGMxdMQeQ5JnAjZqaVwWMzjJFVUVdN/KRZyGw/9CwnM2kU
+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

-->

</rfc>

